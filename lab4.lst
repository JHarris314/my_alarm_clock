
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00001f52  00001fe6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c4  00800166  00800166  0000204c  2**0
                  ALLOC
  3 .stab         00004164  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cc9  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007e79  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007e8c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_8>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_10>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_12>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_16>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_21>
      58:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      5c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      60:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      64:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      68:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      6c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      70:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      74:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      78:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      7c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      80:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      84:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_33>
      88:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      8c:	b0 01       	movw	r22, r0
      8e:	a6 01       	movw	r20, r12
      90:	af 01       	movw	r20, r30
      92:	a6 01       	movw	r20, r12
      94:	af 01       	movw	r20, r30
      96:	af 01       	movw	r20, r30
      98:	b0 01       	movw	r22, r0
      9a:	b0 01       	movw	r22, r0
      9c:	af 01       	movw	r20, r30
      9e:	af 01       	movw	r20, r30
      a0:	a6 01       	movw	r20, r12
      a2:	af 01       	movw	r20, r30
      a4:	a6 01       	movw	r20, r12
      a6:	b0 01       	movw	r22, r0
      a8:	ed 08       	sbc	r14, r13
      aa:	c4 08       	sbc	r12, r4
      ac:	c4 08       	sbc	r12, r4
      ae:	c4 08       	sbc	r12, r4
      b0:	c4 08       	sbc	r12, r4
      b2:	c4 08       	sbc	r12, r4
      b4:	c4 08       	sbc	r12, r4
      b6:	c4 08       	sbc	r12, r4
      b8:	ed 08       	sbc	r14, r13
      ba:	c4 08       	sbc	r12, r4
      bc:	c4 08       	sbc	r12, r4
      be:	c4 08       	sbc	r12, r4
      c0:	c4 08       	sbc	r12, r4
      c2:	c4 08       	sbc	r12, r4
      c4:	c4 08       	sbc	r12, r4
      c6:	c4 08       	sbc	r12, r4
      c8:	f7 08       	sbc	r15, r7
      ca:	c4 08       	sbc	r12, r4
      cc:	c4 08       	sbc	r12, r4
      ce:	c4 08       	sbc	r12, r4
      d0:	c4 08       	sbc	r12, r4
      d2:	c4 08       	sbc	r12, r4
      d4:	c4 08       	sbc	r12, r4
      d6:	c4 08       	sbc	r12, r4
      d8:	c4 08       	sbc	r12, r4
      da:	c4 08       	sbc	r12, r4
      dc:	c4 08       	sbc	r12, r4
      de:	c4 08       	sbc	r12, r4
      e0:	c4 08       	sbc	r12, r4
      e2:	c4 08       	sbc	r12, r4
      e4:	c4 08       	sbc	r12, r4
      e6:	c4 08       	sbc	r12, r4
      e8:	f7 08       	sbc	r15, r7
      ea:	c4 08       	sbc	r12, r4
      ec:	c4 08       	sbc	r12, r4
      ee:	c4 08       	sbc	r12, r4
      f0:	c4 08       	sbc	r12, r4
      f2:	c4 08       	sbc	r12, r4
      f4:	c4 08       	sbc	r12, r4
      f6:	c4 08       	sbc	r12, r4
      f8:	c4 08       	sbc	r12, r4
      fa:	c4 08       	sbc	r12, r4
      fc:	c4 08       	sbc	r12, r4
      fe:	c4 08       	sbc	r12, r4
     100:	c4 08       	sbc	r12, r4
     102:	c4 08       	sbc	r12, r4
     104:	c4 08       	sbc	r12, r4
     106:	c4 08       	sbc	r12, r4
     108:	0e 09       	sbc	r16, r14
     10a:	c4 08       	sbc	r12, r4
     10c:	c4 08       	sbc	r12, r4
     10e:	c4 08       	sbc	r12, r4
     110:	c4 08       	sbc	r12, r4
     112:	c4 08       	sbc	r12, r4
     114:	c4 08       	sbc	r12, r4
     116:	c4 08       	sbc	r12, r4
     118:	12 09       	sbc	r17, r2
     11a:	c4 08       	sbc	r12, r4
     11c:	c4 08       	sbc	r12, r4
     11e:	c4 08       	sbc	r12, r4
     120:	c4 08       	sbc	r12, r4
     122:	c4 08       	sbc	r12, r4
     124:	c4 08       	sbc	r12, r4
     126:	c4 08       	sbc	r12, r4
     128:	c4 08       	sbc	r12, r4
     12a:	c4 08       	sbc	r12, r4
     12c:	c4 08       	sbc	r12, r4
     12e:	c4 08       	sbc	r12, r4
     130:	c4 08       	sbc	r12, r4
     132:	c4 08       	sbc	r12, r4
     134:	c4 08       	sbc	r12, r4
     136:	c4 08       	sbc	r12, r4
     138:	20 09       	sbc	r18, r0
     13a:	c4 08       	sbc	r12, r4
     13c:	c4 08       	sbc	r12, r4
     13e:	c4 08       	sbc	r12, r4
     140:	c4 08       	sbc	r12, r4
     142:	c4 08       	sbc	r12, r4
     144:	c4 08       	sbc	r12, r4
     146:	c4 08       	sbc	r12, r4
     148:	de 08       	sbc	r13, r14

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	d0 e1       	ldi	r29, 0x10	; 16
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	e2 e5       	ldi	r30, 0x52	; 82
     15e:	ff e1       	ldi	r31, 0x1F	; 31
     160:	00 e0       	ldi	r16, 0x00	; 0
     162:	0b bf       	out	0x3b, r16	; 59
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x14>
     166:	07 90       	elpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a6 36       	cpi	r26, 0x66	; 102
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0x10>

00000170 <__do_clear_bss>:
     170:	22 e0       	ldi	r18, 0x02	; 2
     172:	a6 e6       	ldi	r26, 0x66	; 102
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	aa 32       	cpi	r26, 0x2A	; 42
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 38 0b 	call	0x1670	; 0x1670 <main>
     184:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <spi_init>:
//device specific initalizations.  Sets up SPI to be:
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
//******************************************************************************/
void spi_init(void){
	DDRB  |= 0x07;   //Turn on SS, MOSI, SCLK
     18c:	87 b3       	in	r24, 0x17	; 23
     18e:	87 60       	ori	r24, 0x07	; 7
     190:	87 bb       	out	0x17, r24	; 23
	SPCR  |= (1 << SPE) | (1 << MSTR);  //enable SPI, master mode 
     192:	8d b1       	in	r24, 0x0d	; 13
     194:	80 65       	ori	r24, 0x50	; 80
     196:	8d b9       	out	0x0d, r24	; 13
	SPSR  |= (1 << SPI2X); // double speed operation
     198:	70 9a       	sbi	0x0e, 0	; 14
     19a:	08 95       	ret

0000019c <tcnt0_init>:
//external 32khz crystal.  Runs in normal mode with a 128 prescale.  Interrupt
//occurs at overflow 0xFF. This interrupt is responsible for handling the clock
//time. 
//******************************************************************************/
void tcnt0_init(void){
	TIMSK |= (1 << TOIE0); //enable TCNT0 overflow interrupt
     19c:	87 b7       	in	r24, 0x37	; 55
     19e:	81 60       	ori	r24, 0x01	; 1
     1a0:	87 bf       	out	0x37, r24	; 55

	//Normal mode, 128 prescale, clock from 32kHz crystal
	TCCR0 |= (1 << CS02) | (1 << CS00); 
     1a2:	83 b7       	in	r24, 0x33	; 51
     1a4:	85 60       	ori	r24, 0x05	; 5
     1a6:	83 bf       	out	0x33, r24	; 51
	ASSR  |= (1 << AS0); 
     1a8:	80 b7       	in	r24, 0x30	; 48
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 bf       	out	0x30, r24	; 48
     1ae:	08 95       	ret

000001b0 <tcnt1_init>:
//internal 16MHz clock and willtrigger an ISR when the counter reaches the value 
//of the OCR1A register. The OCRIA value is chosen in order to generate a 
//desired frequency that will be the output sound of the alarm.
//******************************************************************************/
void tcnt1_init(void) {
	OCR1A = 0x009C; //initialize to 156
     1b0:	8c e9       	ldi	r24, 0x9C	; 156
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9b bd       	out	0x2b, r25	; 43
     1b6:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A); //enable TCNT1 output compare interrupt enable bit
     1b8:	87 b7       	in	r24, 0x37	; 55
     1ba:	80 61       	ori	r24, 0x10	; 16
     1bc:	87 bf       	out	0x37, r24	; 55

	//CTC mode with a prescale of 64
	TCCR1B |= (1 << CS11)|(1 << CS10)|(1 << WGM12);
     1be:	8e b5       	in	r24, 0x2e	; 46
     1c0:	8b 60       	ori	r24, 0x0B	; 11
     1c2:	8e bd       	out	0x2e, r24	; 46
     1c4:	08 95       	ret

000001c6 <tcnt2_init>:
//Initalizes timer/counter2 (TCNT2). TCNT2 is running in normal mode and enables
//the ISR on overflow. It has a prescale of 128 and is enable in fast PWM mode. 
//It sets the OC2 bit on compare. This timer/counter is responsible 
//******************************************************************************/
void tcnt2_init(void){
	TIMSK  |=  (1 << TOIE2); //enable TCNT2 overflow interrupt
     1c6:	87 b7       	in	r24, 0x37	; 55
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	87 bf       	out	0x37, r24	; 55

	//Normal mode, 128 pre-scale, Set OC2 on compare, clear OC2 at BOTTOM
	TCCR2 |= (1 << CS21)|(1 << CS20)|(1 << COM21)|(1 << COM20);
     1cc:	85 b5       	in	r24, 0x25	; 37
     1ce:	83 63       	ori	r24, 0x33	; 51
     1d0:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << WGM21)|(1 << WGM20);
     1d2:	85 b5       	in	r24, 0x25	; 37
     1d4:	88 64       	ori	r24, 0x48	; 72
     1d6:	85 bd       	out	0x25, r24	; 37
     1d8:	08 95       	ret

000001da <tcnt3_init>:
//prescale of 64. It is responsible for sending a PWM signal to the volume 
//on the audio amplifier board. This timer/counter does not have and ISR and 
//the value in OC3RA is adjusted with the left encoder. 
//******************************************************************************/
void tcnt3_init(void) {
	TCCR3A |= (1 << COM3A1)|(1 << WGM30); //clear on compare match
     1da:	eb e8       	ldi	r30, 0x8B	; 139
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	81 68       	ori	r24, 0x81	; 129
     1e2:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32)|(1 << CS31);
     1e4:	ea e8       	ldi	r30, 0x8A	; 138
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	8a 60       	ori	r24, 0x0A	; 10
     1ec:	80 83       	st	Z, r24
	DDRE |= (1 << PE3); //enable output pin
     1ee:	13 9a       	sbi	0x02, 3	; 2
	OCR3A = 0x7F;
     1f0:	8f e7       	ldi	r24, 0x7F	; 127
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	90 93 87 00 	sts	0x0087, r25
     1f8:	80 93 86 00 	sts	0x0086, r24
     1fc:	08 95       	ret

000001fe <adc_init>:
//ADC, sets a prescale, and then sets the interrupt enable. Only after these
//conditions can the ADC begin its conversion.
//******************************************************************************/
void adc_init() {
	//Vcc internal to Atmega128, ADC PIN 6 (PORTF)
	ADMUX |= (1 << REFS0)|(1 << MUX2)|(1 << MUX0);
     1fe:	87 b1       	in	r24, 0x07	; 7
     200:	85 64       	ori	r24, 0x45	; 69
     202:	87 b9       	out	0x07, r24	; 7

	//Enable ADC, prescale, ADC interrupt enable
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0)|(1 << ADIE);
     204:	86 b1       	in	r24, 0x06	; 6
     206:	8f 68       	ori	r24, 0x8F	; 143
     208:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC); //Start conversion
     20a:	36 9a       	sbi	0x06, 6	; 6
     20c:	08 95       	ret

0000020e <segsum>:
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//******************************************************************************/
void segsum(uint16_t sum) {
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ac 01       	movw	r20, r24
	//break up decimal sum into 4 digit-segments
	uint8_t digit3 = dec_to_7seg[(sum/1000)];     //thousands place
     214:	9c 01       	movw	r18, r24
     216:	36 95       	lsr	r19
     218:	27 95       	ror	r18
     21a:	36 95       	lsr	r19
     21c:	27 95       	ror	r18
     21e:	36 95       	lsr	r19
     220:	27 95       	ror	r18
     222:	a5 ec       	ldi	r26, 0xC5	; 197
     224:	b0 e2       	ldi	r27, 0x20	; 32
     226:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     22a:	92 95       	swap	r25
     22c:	82 95       	swap	r24
     22e:	8f 70       	andi	r24, 0x0F	; 15
     230:	89 27       	eor	r24, r25
     232:	9f 70       	andi	r25, 0x0F	; 15
     234:	89 27       	eor	r24, r25
     236:	fc 01       	movw	r30, r24
     238:	e0 50       	subi	r30, 0x00	; 0
     23a:	ff 4f       	sbci	r31, 0xFF	; 255
     23c:	c0 81       	ld	r28, Z
	uint8_t digit2 = dec_to_7seg[(sum/100) % 10]; //hundreds place
     23e:	9a 01       	movw	r18, r20
     240:	36 95       	lsr	r19
     242:	27 95       	ror	r18
     244:	36 95       	lsr	r19
     246:	27 95       	ror	r18
     248:	ab e7       	ldi	r26, 0x7B	; 123
     24a:	b4 e1       	ldi	r27, 0x14	; 20
     24c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     250:	fc 01       	movw	r30, r24
     252:	f6 95       	lsr	r31
     254:	e7 95       	ror	r30
     256:	9f 01       	movw	r18, r30
     258:	ad ec       	ldi	r26, 0xCD	; 205
     25a:	bc ec       	ldi	r27, 0xCC	; 204
     25c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     260:	96 95       	lsr	r25
     262:	87 95       	ror	r24
     264:	96 95       	lsr	r25
     266:	87 95       	ror	r24
     268:	96 95       	lsr	r25
     26a:	87 95       	ror	r24
     26c:	9c 01       	movw	r18, r24
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	82 0f       	add	r24, r18
     280:	93 1f       	adc	r25, r19
     282:	e8 1b       	sub	r30, r24
     284:	f9 0b       	sbc	r31, r25
     286:	e0 50       	subi	r30, 0x00	; 0
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	d0 81       	ld	r29, Z
	uint8_t digit1 = dec_to_7seg[(sum/10)  % 10]; //tens place
     28c:	9a 01       	movw	r18, r20
     28e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     292:	fc 01       	movw	r30, r24
     294:	f6 95       	lsr	r31
     296:	e7 95       	ror	r30
     298:	f6 95       	lsr	r31
     29a:	e7 95       	ror	r30
     29c:	f6 95       	lsr	r31
     29e:	e7 95       	ror	r30
     2a0:	9f 01       	movw	r18, r30
     2a2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     2a6:	96 95       	lsr	r25
     2a8:	87 95       	ror	r24
     2aa:	96 95       	lsr	r25
     2ac:	87 95       	ror	r24
     2ae:	96 95       	lsr	r25
     2b0:	87 95       	ror	r24
     2b2:	9c 01       	movw	r18, r24
     2b4:	22 0f       	add	r18, r18
     2b6:	33 1f       	adc	r19, r19
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	df 01       	movw	r26, r30
     2ca:	a8 1b       	sub	r26, r24
     2cc:	b9 0b       	sbc	r27, r25
     2ce:	a0 50       	subi	r26, 0x00	; 0
     2d0:	bf 4f       	sbci	r27, 0xFF	; 255
     2d2:	8c 91       	ld	r24, X
	uint8_t digit0 = dec_to_7seg[(sum/1)   % 10]; //ones place 
     2d4:	9f 01       	movw	r18, r30
     2d6:	22 0f       	add	r18, r18
     2d8:	33 1f       	adc	r19, r19
     2da:	ee 0f       	add	r30, r30
     2dc:	ff 1f       	adc	r31, r31
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e2 0f       	add	r30, r18
     2e8:	f3 1f       	adc	r31, r19
     2ea:	4e 1b       	sub	r20, r30
     2ec:	5f 0b       	sbc	r21, r31
     2ee:	fa 01       	movw	r30, r20
     2f0:	e0 50       	subi	r30, 0x00	; 0
     2f2:	ff 4f       	sbci	r31, 0xFF	; 255
     2f4:	90 81       	ld	r25, Z

	if (clock_mode == RADIO_MODE) {
     2f6:	20 91 70 01 	lds	r18, 0x0170
     2fa:	30 91 71 01 	lds	r19, 0x0171
     2fe:	23 30       	cpi	r18, 0x03	; 3
     300:	31 05       	cpc	r19, r1
     302:	59 f0       	breq	.+22     	; 0x31a <segsum+0x10c>
		if ( digit3 == dec_to_7seg[0]) {
			digit3 = dec_to_7seg[10];
		}
	}
	//now move data to right place for misplaced colon position
	segment_data[0] = digit0;
     304:	90 93 0d 01 	sts	0x010D, r25
	segment_data[1] = digit1;
     308:	80 93 0e 01 	sts	0x010E, r24
	segment_data[3] = digit2;
     30c:	d0 93 10 01 	sts	0x0110, r29
	segment_data[4] = digit3;
     310:	c0 93 11 01 	sts	0x0111, r28
}//segment_sum
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret
	uint8_t digit2 = dec_to_7seg[(sum/100) % 10]; //hundreds place
	uint8_t digit1 = dec_to_7seg[(sum/10)  % 10]; //tens place
	uint8_t digit0 = dec_to_7seg[(sum/1)   % 10]; //ones place 

	if (clock_mode == RADIO_MODE) {
		digit1 &= ~(1UL << 7);
     31a:	8f 77       	andi	r24, 0x7F	; 127
		if ( digit3 == dec_to_7seg[0]) {
     31c:	20 91 00 01 	lds	r18, 0x0100
     320:	2c 13       	cpse	r18, r28
     322:	f0 cf       	rjmp	.-32     	; 0x304 <segsum+0xf6>
			digit3 = dec_to_7seg[10];
     324:	c0 91 0a 01 	lds	r28, 0x010A
     328:	ed cf       	rjmp	.-38     	; 0x304 <segsum+0xf6>

0000032a <left_encoder>:
//them into an eight bit integer. This value is represented as a case in
//a switch statement. Four cases are used to increase the volume and four cases
//are used to decrease the volume. 
//******************************************************************************/
void left_encoder(uint8_t past_encoder, uint8_t  encoder) {
	uint8_t direc = (past_encoder << 2 | encoder);
     32a:	24 e0       	ldi	r18, 0x04	; 4
     32c:	82 9f       	mul	r24, r18
     32e:	c0 01       	movw	r24, r0
     330:	11 24       	eor	r1, r1
     332:	e6 2f       	mov	r30, r22
     334:	e8 2b       	or	r30, r24
	switch (direc) { //Determine whether to increase or decrease the volume
     336:	8e 2f       	mov	r24, r30
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	ee 30       	cpi	r30, 0x0E	; 14
     340:	f1 05       	cpc	r31, r1
     342:	68 f4       	brcc	.+26     	; 0x35e <left_encoder+0x34>
     344:	ea 5b       	subi	r30, 0xBA	; 186
     346:	ff 4f       	sbci	r31, 0xFF	; 255
     348:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__tablejump2__>
							 break;
		//Decrease volume
		case 0x04: 
		case 0x0B: 
		case 0x02: 
		case 0x0D: OCR3A -= 4;
     34c:	80 91 86 00 	lds	r24, 0x0086
     350:	90 91 87 00 	lds	r25, 0x0087
     354:	04 97       	sbiw	r24, 0x04	; 4
     356:	90 93 87 00 	sts	0x0087, r25
     35a:	80 93 86 00 	sts	0x0086, r24
     35e:	08 95       	ret
	switch (direc) { //Determine whether to increase or decrease the volume
		//Increase volume
		case 0x01: 
		case 0x0E:	  
		case 0x08: 
		case 0x07: OCR3A += 4;
     360:	80 91 86 00 	lds	r24, 0x0086
     364:	90 91 87 00 	lds	r25, 0x0087
     368:	04 96       	adiw	r24, 0x04	; 4
     36a:	90 93 87 00 	sts	0x0087, r25
     36e:	80 93 86 00 	sts	0x0086, r24
     372:	08 95       	ret

00000374 <right_encoder>:
//switch statement. Each case is either skipped or increments the display value
//in accord with the selected state. 
//******************************************************************************/
void right_encoder(uint8_t past_encoder, uint8_t  encoder) {
	volatile Time *modifier;
	uint8_t direc = (past_encoder << 2 | encoder);
     374:	24 e0       	ldi	r18, 0x04	; 4
     376:	82 9f       	mul	r24, r18
     378:	c0 01       	movw	r24, r0
     37a:	11 24       	eor	r1, r1
     37c:	86 2b       	or	r24, r22
	//switch statement for clock_mode only
	switch (clock_mode) {
     37e:	20 91 70 01 	lds	r18, 0x0170
     382:	30 91 71 01 	lds	r19, 0x0171
     386:	21 30       	cpi	r18, 0x01	; 1
     388:	31 05       	cpc	r19, r1
     38a:	09 f0       	breq	.+2      	; 0x38e <right_encoder+0x1a>
     38c:	40 c0       	rjmp	.+128    	; 0x40e <right_encoder+0x9a>
		case TIME_MODE:
		default:
			modifier = &my_time;
			break;
		case ALARM_MODE:
			modifier = &my_alarm;
     38e:	e2 e7       	ldi	r30, 0x72	; 114
     390:	f1 e0       	ldi	r31, 0x01	; 1
			break;
	}

	if (clock_mode == TIME_MODE || clock_mode == ALARM_MODE) {
     392:	20 91 70 01 	lds	r18, 0x0170
     396:	30 91 71 01 	lds	r19, 0x0171
     39a:	23 2b       	or	r18, r19
     39c:	79 f0       	breq	.+30     	; 0x3bc <right_encoder+0x48>
     39e:	20 91 70 01 	lds	r18, 0x0170
     3a2:	30 91 71 01 	lds	r19, 0x0171
     3a6:	21 30       	cpi	r18, 0x01	; 1
     3a8:	31 05       	cpc	r19, r1
     3aa:	41 f0       	breq	.+16     	; 0x3bc <right_encoder+0x48>
				break;
			default: break;
		}//switch
	}//if

	if (clock_mode == RADIO_MODE) {
     3ac:	20 91 70 01 	lds	r18, 0x0170
     3b0:	30 91 71 01 	lds	r19, 0x0171
     3b4:	23 30       	cpi	r18, 0x03	; 3
     3b6:	31 05       	cpc	r19, r1
     3b8:	69 f1       	breq	.+90     	; 0x414 <right_encoder+0xa0>
     3ba:	08 95       	ret
			break;
	}

	if (clock_mode == TIME_MODE || clock_mode == ALARM_MODE) {
		//Determine direction of encoder for time adjustment
		switch (direc) { 
     3bc:	87 30       	cpi	r24, 0x07	; 7
     3be:	79 f1       	breq	.+94     	; 0x41e <right_encoder+0xaa>
     3c0:	8d 30       	cpi	r24, 0x0D	; 13
     3c2:	a1 f7       	brne	.-24     	; 0x3ac <right_encoder+0x38>
				if (time == TIME_SELECT_MINUTE) {modifier->minute++;} 
				else if (time == TIME_SELECT_HOUR) {modifier->hour++;}	 
				break;

			case 0x0D: //encoder turned left (decrement)
				if (time == TIME_SELECT_MINUTE) {modifier->minute--;} 
     3c4:	80 91 1a 01 	lds	r24, 0x011A
     3c8:	90 91 1b 01 	lds	r25, 0x011B
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <right_encoder+0x5e>
     3d0:	4b c0       	rjmp	.+150    	; 0x468 <right_encoder+0xf4>
				else if (time == TIME_SELECT_HOUR) {modifier->hour--;}
     3d2:	80 91 1a 01 	lds	r24, 0x011A
     3d6:	90 91 1b 01 	lds	r25, 0x011B
     3da:	40 97       	sbiw	r24, 0x10	; 16
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <right_encoder+0x6c>
     3de:	50 c0       	rjmp	.+160    	; 0x480 <right_encoder+0x10c>
				break;
			default: break;
		}//switch
	}//if

	if (clock_mode == RADIO_MODE) {
     3e0:	80 91 70 01 	lds	r24, 0x0170
     3e4:	90 91 71 01 	lds	r25, 0x0171
     3e8:	03 97       	sbiw	r24, 0x03	; 3
     3ea:	39 f7       	brne	.-50     	; 0x3ba <right_encoder+0x46>
				}
				break;

			case 0x0D: //encoder turned left (decrement)
				//decrease the current_fm_freq
				if (encoder_freq > 8810) {
     3ec:	80 91 12 01 	lds	r24, 0x0112
     3f0:	90 91 13 01 	lds	r25, 0x0113
     3f4:	8b 36       	cpi	r24, 0x6B	; 107
     3f6:	92 42       	sbci	r25, 0x22	; 34
     3f8:	00 f3       	brcs	.-64     	; 0x3ba <right_encoder+0x46>
					encoder_freq -=20;
     3fa:	80 91 12 01 	lds	r24, 0x0112
     3fe:	90 91 13 01 	lds	r25, 0x0113
     402:	44 97       	sbiw	r24, 0x14	; 20
     404:	90 93 13 01 	sts	0x0113, r25
     408:	80 93 12 01 	sts	0x0112, r24
     40c:	08 95       	ret
	uint8_t direc = (past_encoder << 2 | encoder);
	//switch statement for clock_mode only
	switch (clock_mode) {
		case TIME_MODE:
		default:
			modifier = &my_time;
     40e:	e5 e7       	ldi	r30, 0x75	; 117
     410:	f1 e0       	ldi	r31, 0x01	; 1
     412:	bf cf       	rjmp	.-130    	; 0x392 <right_encoder+0x1e>
		}//switch
	}//if

	if (clock_mode == RADIO_MODE) {

		switch (direc) { 
     414:	87 30       	cpi	r24, 0x07	; 7
     416:	b1 f0       	breq	.+44     	; 0x444 <right_encoder+0xd0>
     418:	8d 30       	cpi	r24, 0x0D	; 13
     41a:	41 f3       	breq	.-48     	; 0x3ec <right_encoder+0x78>
     41c:	08 95       	ret

	if (clock_mode == TIME_MODE || clock_mode == ALARM_MODE) {
		//Determine direction of encoder for time adjustment
		switch (direc) { 
			case 0x07: //encoder turned right (increment)
				if (time == TIME_SELECT_MINUTE) {modifier->minute++;} 
     41e:	80 91 1a 01 	lds	r24, 0x011A
     422:	90 91 1b 01 	lds	r25, 0x011B
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	19 f1       	breq	.+70     	; 0x470 <right_encoder+0xfc>
				else if (time == TIME_SELECT_HOUR) {modifier->hour++;}	 
     42a:	80 91 1a 01 	lds	r24, 0x011A
     42e:	90 91 1b 01 	lds	r25, 0x011B
     432:	40 97       	sbiw	r24, 0x10	; 16
     434:	09 f1       	breq	.+66     	; 0x478 <right_encoder+0x104>
				break;
			default: break;
		}//switch
	}//if

	if (clock_mode == RADIO_MODE) {
     436:	80 91 70 01 	lds	r24, 0x0170
     43a:	90 91 71 01 	lds	r25, 0x0171
     43e:	03 97       	sbiw	r24, 0x03	; 3
     440:	09 f0       	breq	.+2      	; 0x444 <right_encoder+0xd0>
     442:	bb cf       	rjmp	.-138    	; 0x3ba <right_encoder+0x46>

		switch (direc) { 
			case 0x07: //encoder turned right (increment)
				//increase the current_fm_freq
				if (current_fm_freq < 10790) {
     444:	80 91 aa 01 	lds	r24, 0x01AA
     448:	90 91 ab 01 	lds	r25, 0x01AB
     44c:	86 32       	cpi	r24, 0x26	; 38
     44e:	9a 42       	sbci	r25, 0x2A	; 42
     450:	08 f0       	brcs	.+2      	; 0x454 <right_encoder+0xe0>
     452:	b3 cf       	rjmp	.-154    	; 0x3ba <right_encoder+0x46>
					encoder_freq += 20;
     454:	80 91 12 01 	lds	r24, 0x0112
     458:	90 91 13 01 	lds	r25, 0x0113
     45c:	44 96       	adiw	r24, 0x14	; 20
     45e:	90 93 13 01 	sts	0x0113, r25
     462:	80 93 12 01 	sts	0x0112, r24
     466:	08 95       	ret
				if (time == TIME_SELECT_MINUTE) {modifier->minute++;} 
				else if (time == TIME_SELECT_HOUR) {modifier->hour++;}	 
				break;

			case 0x0D: //encoder turned left (decrement)
				if (time == TIME_SELECT_MINUTE) {modifier->minute--;} 
     468:	81 81       	ldd	r24, Z+1	; 0x01
     46a:	81 50       	subi	r24, 0x01	; 1
     46c:	81 83       	std	Z+1, r24	; 0x01
     46e:	b8 cf       	rjmp	.-144    	; 0x3e0 <right_encoder+0x6c>

	if (clock_mode == TIME_MODE || clock_mode == ALARM_MODE) {
		//Determine direction of encoder for time adjustment
		switch (direc) { 
			case 0x07: //encoder turned right (increment)
				if (time == TIME_SELECT_MINUTE) {modifier->minute++;} 
     470:	81 81       	ldd	r24, Z+1	; 0x01
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	81 83       	std	Z+1, r24	; 0x01
     476:	df cf       	rjmp	.-66     	; 0x436 <right_encoder+0xc2>
				else if (time == TIME_SELECT_HOUR) {modifier->hour++;}	 
     478:	82 81       	ldd	r24, Z+2	; 0x02
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	82 83       	std	Z+2, r24	; 0x02
     47e:	db cf       	rjmp	.-74     	; 0x436 <right_encoder+0xc2>
				break;

			case 0x0D: //encoder turned left (decrement)
				if (time == TIME_SELECT_MINUTE) {modifier->minute--;} 
				else if (time == TIME_SELECT_HOUR) {modifier->hour--;}
     480:	82 81       	ldd	r24, Z+2	; 0x02
     482:	81 50       	subi	r24, 0x01	; 1
     484:	82 83       	std	Z+2, r24	; 0x02
     486:	ac cf       	rjmp	.-168    	; 0x3e0 <right_encoder+0x6c>

00000488 <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing" Expects
//active low pushbuttons on PINA port.  Debounce time is determined by external
//loop delay times 12. 
//******************************************************************************/
uint8_t chk_buttons(uint8_t button) {
     488:	48 2f       	mov	r20, r24
	static uint16_t state[8] = {0}; //holds present state
	state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000; //establishes state of button
     48a:	e8 2f       	mov	r30, r24
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	99 b3       	in	r25, 0x19	; 25
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	e3 58       	subi	r30, 0x83	; 131
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	20 81       	ld	r18, Z
     49a:	31 81       	ldd	r19, Z+1	; 0x01
     49c:	22 0f       	add	r18, r18
     49e:	33 1f       	adc	r19, r19
     4a0:	30 6e       	ori	r19, 0xE0	; 224
     4a2:	89 2f       	mov	r24, r25
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <chk_buttons+0x24>
     4a8:	95 95       	asr	r25
     4aa:	87 95       	ror	r24
     4ac:	4a 95       	dec	r20
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <chk_buttons+0x20>
     4b0:	81 70       	andi	r24, 0x01	; 1
     4b2:	99 27       	eor	r25, r25
     4b4:	28 2b       	or	r18, r24
     4b6:	39 2b       	or	r19, r25
     4b8:	31 83       	std	Z+1, r19	; 0x01
     4ba:	20 83       	st	Z, r18
	if (state[button] == 0xF000) return 1; //if 4 MSB's are high return 1
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	21 15       	cp	r18, r1
     4c0:	30 4f       	sbci	r19, 0xF0	; 240
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <chk_buttons+0x3e>
     4c4:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
     4c6:	08 95       	ret

000004c8 <__vector_16>:
//hit the clock rolls over and one minute is added. Likewise, if 60 minutes is
//hit the clock rolls over and the hour increments. This function is also
//responsible for flashing the colon every second. 
//******************************************************************************/

ISR(TIMER0_OVF_vect) {
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	0b b6       	in	r0, 0x3b	; 59
     4d4:	0f 92       	push	r0
     4d6:	2f 93       	push	r18
     4d8:	3f 93       	push	r19
     4da:	4f 93       	push	r20
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
	static uint8_t j = 0;

	my_time.second++; 
     4ee:	80 91 75 01 	lds	r24, 0x0175
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	80 93 75 01 	sts	0x0175, r24
	if (my_time.second > 59) { //add one minute
     4f8:	80 91 75 01 	lds	r24, 0x0175
     4fc:	8c 33       	cpi	r24, 0x3C	; 60
     4fe:	60 f0       	brcs	.+24     	; 0x518 <__vector_16+0x50>
		my_time.minute++;
     500:	80 91 76 01 	lds	r24, 0x0176
     504:	8f 5f       	subi	r24, 0xFF	; 255
     506:	80 93 76 01 	sts	0x0176, r24
		if (my_time.minute > 59) { //roll over minutes and add one hour
     50a:	80 91 76 01 	lds	r24, 0x0176
     50e:	8c 33       	cpi	r24, 0x3C	; 60
     510:	08 f0       	brcs	.+2      	; 0x514 <__vector_16+0x4c>
     512:	4d c0       	rjmp	.+154    	; 0x5ae <__vector_16+0xe6>
			my_time.hour++;
			my_time.minute = 0;
		}
		my_time.second = 0; //roll over seconds
     514:	10 92 75 01 	sts	0x0175, r1
	}

	if (my_alarm.minute > 59) {
     518:	80 91 73 01 	lds	r24, 0x0173
     51c:	8c 33       	cpi	r24, 0x3C	; 60
     51e:	38 f0       	brcs	.+14     	; 0x52e <__vector_16+0x66>
		my_alarm.hour++;
     520:	80 91 74 01 	lds	r24, 0x0174
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	80 93 74 01 	sts	0x0174, r24
		my_alarm.minute = 0;
     52a:	10 92 73 01 	sts	0x0173, r1
	}

	if (snooze_count > 0) {snooze_count--;}
     52e:	80 91 6f 01 	lds	r24, 0x016F
     532:	88 23       	and	r24, r24
     534:	29 f0       	breq	.+10     	; 0x540 <__vector_16+0x78>
     536:	80 91 6f 01 	lds	r24, 0x016F
     53a:	81 50       	subi	r24, 0x01	; 1
     53c:	80 93 6f 01 	sts	0x016F, r24

	//Blink the colon when not in RADIO_MODE
	if (clock_mode != RADIO_MODE) {
     540:	80 91 70 01 	lds	r24, 0x0170
     544:	90 91 71 01 	lds	r25, 0x0171
     548:	03 97       	sbiw	r24, 0x03	; 3
     54a:	b1 f0       	breq	.+44     	; 0x578 <__vector_16+0xb0>
		if (j == 0)
     54c:	80 91 7c 01 	lds	r24, 0x017C
     550:	88 23       	and	r24, r24
     552:	29 f1       	breq	.+74     	; 0x59e <__vector_16+0xd6>
			segment_data[2] = dec_to_7seg[11]; //colon is illuminated
		else
			segment_data[2] = dec_to_7seg[10]; //colon is off
     554:	80 91 0a 01 	lds	r24, 0x010A
     558:	80 93 0f 01 	sts	0x010F, r24
		j++; 

		if (j > 1) {j = 0;}
     55c:	10 92 7c 01 	sts	0x017C, r1

		alarm_toggle = !alarm_toggle; //toggle alarm sound each second
     560:	90 91 69 01 	lds	r25, 0x0169
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	89 27       	eor	r24, r25
     568:	80 93 69 01 	sts	0x0169, r24

		twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
     56c:	42 e0       	ldi	r20, 0x02	; 2
     56e:	62 ef       	ldi	r22, 0xF2	; 242
     570:	71 e0       	ldi	r23, 0x01	; 1
     572:	80 e9       	ldi	r24, 0x90	; 144
     574:	0e 94 50 09 	call	0x12a0	; 0x12a0 <twi_start_rd>
	}
}//ISR
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	bf 91       	pop	r27
     57e:	af 91       	pop	r26
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	7f 91       	pop	r23
     586:	6f 91       	pop	r22
     588:	5f 91       	pop	r21
     58a:	4f 91       	pop	r20
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	0f 90       	pop	r0
     592:	0b be       	out	0x3b, r0	; 59
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti
	if (snooze_count > 0) {snooze_count--;}

	//Blink the colon when not in RADIO_MODE
	if (clock_mode != RADIO_MODE) {
		if (j == 0)
			segment_data[2] = dec_to_7seg[11]; //colon is illuminated
     59e:	80 91 0b 01 	lds	r24, 0x010B
     5a2:	80 93 0f 01 	sts	0x010F, r24
		else
			segment_data[2] = dec_to_7seg[10]; //colon is off
		j++; 
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	80 93 7c 01 	sts	0x017C, r24
     5ac:	d9 cf       	rjmp	.-78     	; 0x560 <__vector_16+0x98>

	my_time.second++; 
	if (my_time.second > 59) { //add one minute
		my_time.minute++;
		if (my_time.minute > 59) { //roll over minutes and add one hour
			my_time.hour++;
     5ae:	80 91 77 01 	lds	r24, 0x0177
     5b2:	8f 5f       	subi	r24, 0xFF	; 255
     5b4:	80 93 77 01 	sts	0x0177, r24
			my_time.minute = 0;
     5b8:	10 92 76 01 	sts	0x0176, r1
     5bc:	ab cf       	rjmp	.-170    	; 0x514 <__vector_16+0x4c>

000005be <__vector_12>:
//                           timer/counter1 ISR                          
//When TCNT1 counter is equal to the compare register value this ISR is called.
//The timer/counter1 ISR is responisble for toggleing PORTD bit 5 in order to
//generate a square wave at the desired frquency of 800 Hz.
//******************************************************************************/
ISR(TIMER1_COMPA_vect) {
     5be:	1f 92       	push	r1
     5c0:	0f 92       	push	r0
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	8f 93       	push	r24
     5ca:	9f 93       	push	r25
	DDRD |= (1 << PD5); //set PD5 as an output
     5cc:	8d 9a       	sbi	0x11, 5	; 17
	if (alarm_engaged && alarm_toggle){ //sound alarm in one second increments
     5ce:	80 91 68 01 	lds	r24, 0x0168
     5d2:	88 23       	and	r24, r24
     5d4:	21 f0       	breq	.+8      	; 0x5de <__vector_12+0x20>
     5d6:	80 91 69 01 	lds	r24, 0x0169
     5da:	81 11       	cpse	r24, r1
     5dc:	08 c0       	rjmp	.+16     	; 0x5ee <__vector_12+0x30>
		PORTD ^= (1 << PD5);
	}//if
	else {PORTD = 0;}
     5de:	12 ba       	out	0x12, r1	; 18
}//ISR
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	0f 90       	pop	r0
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	0f 90       	pop	r0
     5ea:	1f 90       	pop	r1
     5ec:	18 95       	reti
//generate a square wave at the desired frquency of 800 Hz.
//******************************************************************************/
ISR(TIMER1_COMPA_vect) {
	DDRD |= (1 << PD5); //set PD5 as an output
	if (alarm_engaged && alarm_toggle){ //sound alarm in one second increments
		PORTD ^= (1 << PD5);
     5ee:	92 b3       	in	r25, 0x12	; 18
     5f0:	80 e2       	ldi	r24, 0x20	; 32
     5f2:	89 27       	eor	r24, r25
     5f4:	82 bb       	out	0x12, r24	; 18
	}//if
	else {PORTD = 0;}
}//ISR
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti

00000604 <alarm_handler>:
//variable will display on the LCD that the alarm is on. If the alarm time and
//the clock time are the same, the disply changes and the alarm_engaged boolean
//is set true, which enables PORTD bit 5 to output.
//******************************************************************************/
void alarm_handler(bool alarm_armed) {
	if (alarm_armed && snooze_count == 0) {
     604:	88 23       	and	r24, r24
     606:	21 f0       	breq	.+8      	; 0x610 <alarm_handler+0xc>
     608:	80 91 6f 01 	lds	r24, 0x016F
     60c:	88 23       	and	r24, r24
     60e:	19 f0       	breq	.+6      	; 0x616 <alarm_handler+0x12>
			strcpy(alarm_array, "TIME TO RISE");
			alarm_engaged = true;
			return;
		}
	}
	alarm_engaged = false;
     610:	10 92 68 01 	sts	0x0168, r1
     614:	08 95       	ret
//the clock time are the same, the disply changes and the alarm_engaged boolean
//is set true, which enables PORTD bit 5 to output.
//******************************************************************************/
void alarm_handler(bool alarm_armed) {
	if (alarm_armed && snooze_count == 0) {
		strcpy(alarm_array, "ALARM:ON");
     616:	89 e0       	ldi	r24, 0x09	; 9
     618:	ec e1       	ldi	r30, 0x1C	; 28
     61a:	f1 e0       	ldi	r31, 0x01	; 1
     61c:	ac ea       	ldi	r26, 0xAC	; 172
     61e:	b1 e0       	ldi	r27, 0x01	; 1
     620:	01 90       	ld	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	8a 95       	dec	r24
     626:	e1 f7       	brne	.-8      	; 0x620 <alarm_handler+0x1c>
		if (
				my_alarm.hour == my_time.hour &&
     628:	90 91 74 01 	lds	r25, 0x0174
     62c:	80 91 77 01 	lds	r24, 0x0177
//is set true, which enables PORTD bit 5 to output.
//******************************************************************************/
void alarm_handler(bool alarm_armed) {
	if (alarm_armed && snooze_count == 0) {
		strcpy(alarm_array, "ALARM:ON");
		if (
     630:	98 13       	cpse	r25, r24
     632:	ee cf       	rjmp	.-36     	; 0x610 <alarm_handler+0xc>
				my_alarm.hour == my_time.hour &&
				my_alarm.minute == my_time.minute
     634:	90 91 73 01 	lds	r25, 0x0173
     638:	80 91 76 01 	lds	r24, 0x0176
//******************************************************************************/
void alarm_handler(bool alarm_armed) {
	if (alarm_armed && snooze_count == 0) {
		strcpy(alarm_array, "ALARM:ON");
		if (
				my_alarm.hour == my_time.hour &&
     63c:	98 13       	cpse	r25, r24
     63e:	e8 cf       	rjmp	.-48     	; 0x610 <alarm_handler+0xc>
				my_alarm.minute == my_time.minute
			 ) {
			strcpy(alarm_array, "TIME TO RISE");
     640:	8d e0       	ldi	r24, 0x0D	; 13
     642:	e5 e2       	ldi	r30, 0x25	; 37
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	ac ea       	ldi	r26, 0xAC	; 172
     648:	b1 e0       	ldi	r27, 0x01	; 1
     64a:	01 90       	ld	r0, Z+
     64c:	0d 92       	st	X+, r0
     64e:	8a 95       	dec	r24
     650:	e1 f7       	brne	.-8      	; 0x64a <alarm_handler+0x46>
			alarm_engaged = true;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	80 93 68 01 	sts	0x0168, r24
     658:	08 95       	ret

0000065a <radio_init>:

//******************************************************************************/
//															radio_init
//******************************************************************************/
void radio_init() {
		PORTE |= 0x08;
     65a:	1b 9a       	sbi	0x03, 3	; 3
		DDRE |= 0x08;
     65c:	13 9a       	sbi	0x02, 3	; 2

		//PE2 is active high reset
		DDRE |= 0x04;
     65e:	12 9a       	sbi	0x02, 2	; 2
		PORTE |= 0x04;
     660:	1a 9a       	sbi	0x03, 2	; 3

		//Enable interrupt 7
		EICRB |= (1 << ISC71) | (1 << ISC70);
     662:	8a b7       	in	r24, 0x3a	; 58
     664:	80 6c       	ori	r24, 0xC0	; 192
     666:	8a bf       	out	0x3a, r24	; 58
		EIMSK |= (1 << INT7);
     668:	89 b7       	in	r24, 0x39	; 57
     66a:	80 68       	ori	r24, 0x80	; 128
     66c:	89 bf       	out	0x39, r24	; 57

		//Hardware reset of si4734
		PORTE &= ~(1 << PE7); //set low to sense TWI mode
     66e:	1f 98       	cbi	0x03, 7	; 3
		DDRE |= 0x80; 
     670:	17 9a       	sbi	0x02, 7	; 2
		PORTE |= (1 << PE2); //hardware reset
     672:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     674:	8f e1       	ldi	r24, 0x1F	; 31
     676:	93 e0       	ldi	r25, 0x03	; 3
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <radio_init+0x1e>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <radio_init+0x24>
     67e:	00 00       	nop
		_delay_us(200);
		PORTE &= ~(1 << PE2); //release reset
     680:	1a 98       	cbi	0x03, 2	; 3
     682:	90 ea       	ldi	r25, 0xA0	; 160
     684:	9a 95       	dec	r25
     686:	f1 f7       	brne	.-4      	; 0x684 <radio_init+0x2a>
		_delay_us(30);
		DDRE &= ~(0x80); //PE7 to act as input from radio interrupt
     688:	17 98       	cbi	0x02, 7	; 2
     68a:	08 95       	ret

0000068c <__vector_10>:
//TCNT0 interrupts come at 7.8125ms internals. write to bg, read from encoders
// 1/32768         = 30.517578uS
//(1/32768)*256    = 7.8125ms
//(1/32768)*256*64 = 500mS
//******************************************************************************/
ISR(TIMER2_OVF_vect) {
     68c:	1f 92       	push	r1
     68e:	0f 92       	push	r0
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	0b b6       	in	r0, 0x3b	; 59
     698:	0f 92       	push	r0
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	ef 93       	push	r30
     6c8:	ff 93       	push	r31
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	1f 92       	push	r1
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
	static uint8_t past_encoder = 0; //stores previous encoder state value
	static uint8_t j = 0; //segment display variable
	static bool alarm_armed = false; //used to set arming

	//Load data from the encoders
	clr_bit(PORTE, PE6); //load data in the 165
     6d4:	1e 98       	cbi	0x03, 6	; 3
	set_bit(PORTE, PE6); //shift data out the 165
     6d6:	1e 9a       	sbi	0x03, 6	; 3

	DDRA = 0x00;  //intitialize PORTA to inputs
     6d8:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; //enable pull-ups
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x70;
     6de:	80 e7       	ldi	r24, 0x70	; 112
     6e0:	88 bb       	out	0x18, r24	; 24
     6e2:	0d e7       	ldi	r16, 0x7D	; 125
     6e4:	11 e0       	ldi	r17, 0x01	; 1
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	61 2c       	mov	r6, r1
     6ea:	71 2c       	mov	r7, r1
										: TIME_MODE
										);
								clear_display();
								break;
				case 5: if (clock_mode != SNOOZE_MODE) { //set snooze mode
									clock_mode = SNOOZE_MODE;
     6ec:	72 e0       	ldi	r23, 0x02	; 2
     6ee:	e7 2e       	mov	r14, r23
     6f0:	f1 2c       	mov	r15, r1
									snooze_count = 10;
     6f2:	ea e0       	ldi	r30, 0x0A	; 10
     6f4:	8e 2e       	mov	r8, r30
								else {
									clock_mode = TIME_MODE; //else enter time mode
									snooze_count = 0;
								}
								break;
				case 6: alarm_armed = !alarm_armed; //toggle arming the alarm
     6f6:	99 24       	eor	r9, r9
     6f8:	93 94       	inc	r9
	for(uint8_t i=0; i < 8; i++) {
		if(chk_buttons(i)) { //if button is pressed
			switch(i) { //cases for buttons pressed
				case 1: time = TIME_SELECT_HOUR; //choose hour using right encoder
								break;
				case 2: time = TIME_SELECT_MINUTE; //choose minute using right encoder
     6fa:	aa 24       	eor	r10, r10
     6fc:	a3 94       	inc	r10
     6fe:	b1 2c       	mov	r11, r1

	//Check the buttons
	for(uint8_t i=0; i < 8; i++) {
		if(chk_buttons(i)) { //if button is pressed
			switch(i) { //cases for buttons pressed
				case 1: time = TIME_SELECT_HOUR; //choose hour using right encoder
     700:	a0 e1       	ldi	r26, 0x10	; 16
     702:	ca 2e       	mov	r12, r26
     704:	d1 2c       	mov	r13, r1
     706:	07 c0       	rjmp	.+14     	; 0x716 <__vector_10+0x8a>
	DDRA = 0x00;  //intitialize PORTA to inputs
	PORTA = 0xFF; //enable pull-ups
	PORTB = 0x70;

	//Check the buttons
	for(uint8_t i=0; i < 8; i++) {
     708:	48 30       	cpi	r20, 0x08	; 8
     70a:	09 f4       	brne	.+2      	; 0x70e <__vector_10+0x82>
     70c:	47 c0       	rjmp	.+142    	; 0x79c <__vector_10+0x110>
     70e:	2f ef       	ldi	r18, 0xFF	; 255
     710:	62 1a       	sub	r6, r18
     712:	72 0a       	sbc	r7, r18
     714:	4f 5f       	subi	r20, 0xFF	; 255
     716:	56 2d       	mov	r21, r6
//active low pushbuttons on PINA port.  Debounce time is determined by external
//loop delay times 12. 
//******************************************************************************/
uint8_t chk_buttons(uint8_t button) {
	static uint16_t state[8] = {0}; //holds present state
	state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button)) | 0xE000; //establishes state of button
     718:	99 b3       	in	r25, 0x19	; 25
     71a:	f8 01       	movw	r30, r16
     71c:	20 81       	ld	r18, Z
     71e:	31 81       	ldd	r19, Z+1	; 0x01
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	30 6e       	ori	r19, 0xE0	; 224
     726:	89 2f       	mov	r24, r25
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	06 2c       	mov	r0, r6
     72c:	02 c0       	rjmp	.+4      	; 0x732 <__vector_10+0xa6>
     72e:	95 95       	asr	r25
     730:	87 95       	ror	r24
     732:	0a 94       	dec	r0
     734:	e2 f7       	brpl	.-8      	; 0x72e <__vector_10+0xa2>
     736:	81 70       	andi	r24, 0x01	; 1
     738:	99 27       	eor	r25, r25
     73a:	82 2b       	or	r24, r18
     73c:	93 2b       	or	r25, r19
     73e:	81 93       	st	Z+, r24
     740:	91 93       	st	Z+, r25
     742:	8f 01       	movw	r16, r30
	if (state[button] == 0xF000) return 1; //if 4 MSB's are high return 1
     744:	81 15       	cp	r24, r1
     746:	90 4f       	sbci	r25, 0xF0	; 240
     748:	f9 f6       	brne	.-66     	; 0x708 <__vector_10+0x7c>
		if(chk_buttons(i)) { //if button is pressed
			switch(i) { //cases for buttons pressed
     74a:	53 30       	cpi	r21, 0x03	; 3
     74c:	09 f4       	brne	.+2      	; 0x750 <__vector_10+0xc4>
     74e:	f1 c0       	rjmp	.+482    	; 0x932 <__vector_10+0x2a6>
     750:	08 f4       	brcc	.+2      	; 0x754 <__vector_10+0xc8>
     752:	e0 c0       	rjmp	.+448    	; 0x914 <__vector_10+0x288>
     754:	56 30       	cpi	r21, 0x06	; 6
     756:	09 f4       	brne	.+2      	; 0x75a <__vector_10+0xce>
     758:	fd c0       	rjmp	.+506    	; 0x954 <__vector_10+0x2c8>
     75a:	57 30       	cpi	r21, 0x07	; 7
     75c:	81 f0       	breq	.+32     	; 0x77e <__vector_10+0xf2>
     75e:	55 30       	cpi	r21, 0x05	; 5
     760:	99 f6       	brne	.-90     	; 0x708 <__vector_10+0x7c>
										? RADIO_MODE
										: TIME_MODE
										);
								clear_display();
								break;
				case 5: if (clock_mode != SNOOZE_MODE) { //set snooze mode
     762:	80 91 70 01 	lds	r24, 0x0170
     766:	90 91 71 01 	lds	r25, 0x0171
     76a:	02 97       	sbiw	r24, 0x02	; 2
     76c:	09 f4       	brne	.+2      	; 0x770 <__vector_10+0xe4>
     76e:	3a c1       	rjmp	.+628    	; 0x9e4 <__vector_10+0x358>
									clock_mode = SNOOZE_MODE;
     770:	f0 92 71 01 	sts	0x0171, r15
     774:	e0 92 70 01 	sts	0x0170, r14
									snooze_count = 10;
     778:	80 92 6f 01 	sts	0x016F, r8
     77c:	c8 cf       	rjmp	.-112    	; 0x70e <__vector_10+0x82>
				case 6: alarm_armed = !alarm_armed; //toggle arming the alarm
								break;
				case 7: clock_mode = ( //ternary for mode selection
										(clock_mode == TIME_MODE)
										? ALARM_MODE
										: TIME_MODE
     77e:	20 91 70 01 	lds	r18, 0x0170
     782:	30 91 71 01 	lds	r19, 0x0171
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	23 2b       	or	r18, r19
     78c:	09 f0       	breq	.+2      	; 0x790 <__vector_10+0x104>
     78e:	e8 c0       	rjmp	.+464    	; 0x960 <__vector_10+0x2d4>
									snooze_count = 0;
								}
								break;
				case 6: alarm_armed = !alarm_armed; //toggle arming the alarm
								break;
				case 7: clock_mode = ( //ternary for mode selection
     790:	90 93 71 01 	sts	0x0171, r25
     794:	80 93 70 01 	sts	0x0170, r24
										(clock_mode == TIME_MODE)
										? ALARM_MODE
										: TIME_MODE
										);
								clear_display();	
     798:	0e 94 83 06 	call	0xd06	; 0xd06 <clear_display>
								break;
			}//switch
		}//if			
	}//for

	switch (clock_mode) {
     79c:	80 91 70 01 	lds	r24, 0x0170
     7a0:	90 91 71 01 	lds	r25, 0x0171
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	91 05       	cpc	r25, r1
     7a8:	09 f4       	brne	.+2      	; 0x7ac <__vector_10+0x120>
     7aa:	04 c1       	rjmp	.+520    	; 0x9b4 <__vector_10+0x328>
     7ac:	08 f4       	brcc	.+2      	; 0x7b0 <__vector_10+0x124>
     7ae:	ea c0       	rjmp	.+468    	; 0x984 <__vector_10+0x2f8>
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	91 05       	cpc	r25, r1
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <__vector_10+0x12c>
     7b6:	da c0       	rjmp	.+436    	; 0x96c <__vector_10+0x2e0>
     7b8:	03 97       	sbiw	r24, 0x03	; 3
     7ba:	f9 f4       	brne	.+62     	; 0x7fa <__vector_10+0x16e>
		case SNOOZE_MODE: //set snooze
			alarm_engaged = false;
			strcpy(alarm_array, "SNOOZE");
			break;
		case RADIO_MODE:
		  segment_data[2] = dec_to_7seg[10];	
     7bc:	80 91 0a 01 	lds	r24, 0x010A
     7c0:	80 93 0f 01 	sts	0x010F, r24
			disp_value = encoder_freq/10; //shift to rid display of trailing zero
     7c4:	20 91 12 01 	lds	r18, 0x0112
     7c8:	30 91 13 01 	lds	r19, 0x0113
     7cc:	ad ec       	ldi	r26, 0xCD	; 205
     7ce:	bc ec       	ldi	r27, 0xCC	; 204
     7d0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     7d4:	96 95       	lsr	r25
     7d6:	87 95       	ror	r24
     7d8:	96 95       	lsr	r25
     7da:	87 95       	ror	r24
     7dc:	96 95       	lsr	r25
     7de:	87 95       	ror	r24
     7e0:	90 93 6d 01 	sts	0x016D, r25
     7e4:	80 93 6c 01 	sts	0x016C, r24
			strcpy(alarm_array, "RADIO ON");
     7e8:	89 e0       	ldi	r24, 0x09	; 9
     7ea:	ed e4       	ldi	r30, 0x4D	; 77
     7ec:	f1 e0       	ldi	r31, 0x01	; 1
     7ee:	ac ea       	ldi	r26, 0xAC	; 172
     7f0:	b1 e0       	ldi	r27, 0x01	; 1
     7f2:	01 90       	ld	r0, Z+
     7f4:	0d 92       	st	X+, r0
     7f6:	8a 95       	dec	r24
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <__vector_10+0x166>
			break;
		default: break;
	} //switch

	alarm_handler(alarm_armed); //handle the alarm functionality
     7fa:	80 91 7b 01 	lds	r24, 0x017B
     7fe:	0e 94 02 03 	call	0x604	; 0x604 <alarm_handler>

	SPDR = my_time.second; //shift seconds (will display on bar graph)
     802:	80 91 75 01 	lds	r24, 0x0175
     806:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR, SPIF)){} //wait until the end of the load
     808:	77 9b       	sbis	0x0e, 7	; 14
     80a:	fe cf       	rjmp	.-4      	; 0x808 <__vector_10+0x17c>
	PORTB |= 0x01;  //rising edge for ss_n pin on 595
     80c:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~0x01; //falling edge for ss_n pin on 595
     80e:	c0 98       	cbi	0x18, 0	; 24

	//Shift data from MISO into SPDR
	encoder = SPDR; //set encoder equal to the SPI data register
     810:	0f b1       	in	r16, 0x0f	; 15
	encoder &= (0x0F); //set all encoder bits (3:0) high
     812:	80 2f       	mov	r24, r16
     814:	8f 70       	andi	r24, 0x0F	; 15
     816:	f8 2e       	mov	r15, r24
     818:	80 93 7a 01 	sts	0x017A, r24

	segsum(disp_value); //call segsum
     81c:	80 91 6c 01 	lds	r24, 0x016C
     820:	90 91 6d 01 	lds	r25, 0x016D
     824:	0e 94 07 01 	call	0x20e	; 0x20e <segsum>
	//Encoder values are stored in 4 bits. The upper two bits are for the
	//right encoder and the lower two are for the left. 
	right_encoder((past_encoder & 0x0C) >> 2, (encoder & 0x0C) >> 2);
     828:	10 91 79 01 	lds	r17, 0x0179
     82c:	60 2f       	mov	r22, r16
     82e:	6c 70       	andi	r22, 0x0C	; 12
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	75 95       	asr	r23
     834:	67 95       	ror	r22
     836:	75 95       	asr	r23
     838:	67 95       	ror	r22
     83a:	81 2f       	mov	r24, r17
     83c:	8c 70       	andi	r24, 0x0C	; 12
     83e:	86 95       	lsr	r24
     840:	86 95       	lsr	r24
     842:	0e 94 ba 01 	call	0x374	; 0x374 <right_encoder>
	left_encoder((past_encoder & 0x03), (encoder & 0x03));
     846:	60 2f       	mov	r22, r16
     848:	63 70       	andi	r22, 0x03	; 3
     84a:	81 2f       	mov	r24, r17
     84c:	83 70       	andi	r24, 0x03	; 3
     84e:	0e 94 95 01 	call	0x32a	; 0x32a <left_encoder>

	if (my_time.hour > 24) {my_time.hour = 0;}
     852:	80 91 77 01 	lds	r24, 0x0177
     856:	89 31       	cpi	r24, 0x19	; 25
     858:	10 f0       	brcs	.+4      	; 0x85e <__vector_10+0x1d2>
     85a:	10 92 77 01 	sts	0x0177, r1
	if (my_time.minute > 59) {my_time.minute = 0;}
     85e:	80 91 76 01 	lds	r24, 0x0176
     862:	8c 33       	cpi	r24, 0x3C	; 60
     864:	10 f0       	brcs	.+4      	; 0x86a <__vector_10+0x1de>
     866:	10 92 76 01 	sts	0x0176, r1
	past_encoder = encoder; //remember current state for next interrupt
     86a:	f0 92 79 01 	sts	0x0179, r15

	//Loop through segments
	if (j > 4) {j = 0;}
     86e:	80 91 78 01 	lds	r24, 0x0178
     872:	85 30       	cpi	r24, 0x05	; 5
     874:	10 f0       	brcs	.+4      	; 0x87a <__vector_10+0x1ee>
     876:	10 92 78 01 	sts	0x0178, r1
	DDRA = 0xFF;
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	8a bb       	out	0x1a, r24	; 26
	PORTA = segment_data[j];
     87e:	e0 91 78 01 	lds	r30, 0x0178
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	e3 5f       	subi	r30, 0xF3	; 243
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	80 81       	ld	r24, Z
     88a:	8b bb       	out	0x1b, r24	; 27
	PORTB = (j << 4);
     88c:	80 91 78 01 	lds	r24, 0x0178
     890:	82 95       	swap	r24
     892:	80 7f       	andi	r24, 0xF0	; 240
     894:	88 bb       	out	0x18, r24	; 24
	j++;
     896:	80 91 78 01 	lds	r24, 0x0178
     89a:	8f 5f       	subi	r24, 0xFF	; 255
     89c:	80 93 78 01 	sts	0x0178, r24

	strncpy(temp_in_display, temperature, 16);
     8a0:	40 e1       	ldi	r20, 0x10	; 16
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	65 e9       	ldi	r22, 0x95	; 149
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	80 91 14 01 	lds	r24, 0x0114
     8ac:	90 91 15 01 	lds	r25, 0x0115
     8b0:	0e 94 91 0c 	call	0x1922	; 0x1922 <strncpy>
	strncpy(alarm_display, alarm_array, 16);
     8b4:	40 e1       	ldi	r20, 0x10	; 16
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	6c ea       	ldi	r22, 0xAC	; 172
     8ba:	71 e0       	ldi	r23, 0x01	; 1
     8bc:	80 91 16 01 	lds	r24, 0x0116
     8c0:	90 91 17 01 	lds	r25, 0x0117
     8c4:	0e 94 91 0c 	call	0x1922	; 0x1922 <strncpy>
	refresh_lcd(lcd_string_array);
     8c8:	80 ec       	ldi	r24, 0xC0	; 192
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 33 05 	call	0xa66	; 0xa66 <refresh_lcd>
}//ISR
     8d0:	0f 90       	pop	r0
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	bf 91       	pop	r27
     8dc:	af 91       	pop	r26
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	7f 91       	pop	r23
     8e4:	6f 91       	pop	r22
     8e6:	5f 91       	pop	r21
     8e8:	4f 91       	pop	r20
     8ea:	3f 91       	pop	r19
     8ec:	2f 91       	pop	r18
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	7f 90       	pop	r7
     904:	6f 90       	pop	r6
     906:	0f 90       	pop	r0
     908:	0b be       	out	0x3b, r0	; 59
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti
	PORTB = 0x70;

	//Check the buttons
	for(uint8_t i=0; i < 8; i++) {
		if(chk_buttons(i)) { //if button is pressed
			switch(i) { //cases for buttons pressed
     914:	51 30       	cpi	r21, 0x01	; 1
     916:	41 f0       	breq	.+16     	; 0x928 <__vector_10+0x29c>
     918:	52 30       	cpi	r21, 0x02	; 2
     91a:	09 f0       	breq	.+2      	; 0x91e <__vector_10+0x292>
     91c:	f5 ce       	rjmp	.-534    	; 0x708 <__vector_10+0x7c>
				case 1: time = TIME_SELECT_HOUR; //choose hour using right encoder
								break;
				case 2: time = TIME_SELECT_MINUTE; //choose minute using right encoder
     91e:	b0 92 1b 01 	sts	0x011B, r11
     922:	a0 92 1a 01 	sts	0x011A, r10
								break;
     926:	f3 ce       	rjmp	.-538    	; 0x70e <__vector_10+0x82>

	//Check the buttons
	for(uint8_t i=0; i < 8; i++) {
		if(chk_buttons(i)) { //if button is pressed
			switch(i) { //cases for buttons pressed
				case 1: time = TIME_SELECT_HOUR; //choose hour using right encoder
     928:	d0 92 1b 01 	sts	0x011B, r13
     92c:	c0 92 1a 01 	sts	0x011A, r12
								break;
     930:	ee ce       	rjmp	.-548    	; 0x70e <__vector_10+0x82>
				case 2: time = TIME_SELECT_MINUTE; //choose minute using right encoder
								break;
				case 3: clock_mode = (
										(clock_mode == TIME_MODE)
     932:	80 91 70 01 	lds	r24, 0x0170
     936:	90 91 71 01 	lds	r25, 0x0171
			switch(i) { //cases for buttons pressed
				case 1: time = TIME_SELECT_HOUR; //choose hour using right encoder
								break;
				case 2: time = TIME_SELECT_MINUTE; //choose minute using right encoder
								break;
				case 3: clock_mode = (
     93a:	89 2b       	or	r24, r25
     93c:	a1 f0       	breq	.+40     	; 0x966 <__vector_10+0x2da>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	90 93 71 01 	sts	0x0171, r25
     946:	80 93 70 01 	sts	0x0170, r24
										(clock_mode == TIME_MODE)
										? RADIO_MODE
										: TIME_MODE
										);
								clear_display();
     94a:	49 83       	std	Y+1, r20	; 0x01
     94c:	0e 94 83 06 	call	0xd06	; 0xd06 <clear_display>
								break;
     950:	49 81       	ldd	r20, Y+1	; 0x01
     952:	dd ce       	rjmp	.-582    	; 0x70e <__vector_10+0x82>
								else {
									clock_mode = TIME_MODE; //else enter time mode
									snooze_count = 0;
								}
								break;
				case 6: alarm_armed = !alarm_armed; //toggle arming the alarm
     954:	80 91 7b 01 	lds	r24, 0x017B
     958:	89 25       	eor	r24, r9
     95a:	80 93 7b 01 	sts	0x017B, r24
								break;
     95e:	d7 ce       	rjmp	.-594    	; 0x70e <__vector_10+0x82>
				case 7: clock_mode = ( //ternary for mode selection
										(clock_mode == TIME_MODE)
										? ALARM_MODE
										: TIME_MODE
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	15 cf       	rjmp	.-470    	; 0x790 <__vector_10+0x104>
			switch(i) { //cases for buttons pressed
				case 1: time = TIME_SELECT_HOUR; //choose hour using right encoder
								break;
				case 2: time = TIME_SELECT_MINUTE; //choose minute using right encoder
								break;
				case 3: clock_mode = (
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	eb cf       	rjmp	.-42     	; 0x942 <__vector_10+0x2b6>
		case TIME_MODE: //display the time
			disp_value = (my_time.hour * 100) + my_time.minute;
			strcpy(alarm_array, "ALARM:OFF"); //write to LCD display
			break;
		case SNOOZE_MODE: //set snooze
			alarm_engaged = false;
     96c:	10 92 68 01 	sts	0x0168, r1
			strcpy(alarm_array, "SNOOZE");
     970:	87 e0       	ldi	r24, 0x07	; 7
     972:	e6 e4       	ldi	r30, 0x46	; 70
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	ac ea       	ldi	r26, 0xAC	; 172
     978:	b1 e0       	ldi	r27, 0x01	; 1
     97a:	01 90       	ld	r0, Z+
     97c:	0d 92       	st	X+, r0
     97e:	8a 95       	dec	r24
     980:	e1 f7       	brne	.-8      	; 0x97a <__vector_10+0x2ee>
			break;
     982:	3b cf       	rjmp	.-394    	; 0x7fa <__vector_10+0x16e>
		case ALARM_MODE: //display the alarm time
			disp_value = (my_alarm.hour * 100) + my_alarm.minute;
		  strcpy(alarm_array, "SET ALARM"); //write to LCD display
			break;
		case TIME_MODE: //display the time
			disp_value = (my_time.hour * 100) + my_time.minute;
     984:	20 91 77 01 	lds	r18, 0x0177
     988:	80 91 76 01 	lds	r24, 0x0176
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	64 e6       	ldi	r22, 0x64	; 100
     990:	26 9f       	mul	r18, r22
     992:	80 0d       	add	r24, r0
     994:	91 1d       	adc	r25, r1
     996:	11 24       	eor	r1, r1
     998:	90 93 6d 01 	sts	0x016D, r25
     99c:	80 93 6c 01 	sts	0x016C, r24
			strcpy(alarm_array, "ALARM:OFF"); //write to LCD display
     9a0:	8a e0       	ldi	r24, 0x0A	; 10
     9a2:	ec e3       	ldi	r30, 0x3C	; 60
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	ac ea       	ldi	r26, 0xAC	; 172
     9a8:	b1 e0       	ldi	r27, 0x01	; 1
     9aa:	01 90       	ld	r0, Z+
     9ac:	0d 92       	st	X+, r0
     9ae:	8a 95       	dec	r24
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <__vector_10+0x31e>
			break;
     9b2:	23 cf       	rjmp	.-442    	; 0x7fa <__vector_10+0x16e>
		}//if			
	}//for

	switch (clock_mode) {
		case ALARM_MODE: //display the alarm time
			disp_value = (my_alarm.hour * 100) + my_alarm.minute;
     9b4:	20 91 74 01 	lds	r18, 0x0174
     9b8:	80 91 73 01 	lds	r24, 0x0173
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	34 e6       	ldi	r19, 0x64	; 100
     9c0:	23 9f       	mul	r18, r19
     9c2:	80 0d       	add	r24, r0
     9c4:	91 1d       	adc	r25, r1
     9c6:	11 24       	eor	r1, r1
     9c8:	90 93 6d 01 	sts	0x016D, r25
     9cc:	80 93 6c 01 	sts	0x016C, r24
		  strcpy(alarm_array, "SET ALARM"); //write to LCD display
     9d0:	8a e0       	ldi	r24, 0x0A	; 10
     9d2:	e2 e3       	ldi	r30, 0x32	; 50
     9d4:	f1 e0       	ldi	r31, 0x01	; 1
     9d6:	ac ea       	ldi	r26, 0xAC	; 172
     9d8:	b1 e0       	ldi	r27, 0x01	; 1
     9da:	01 90       	ld	r0, Z+
     9dc:	0d 92       	st	X+, r0
     9de:	8a 95       	dec	r24
     9e0:	e1 f7       	brne	.-8      	; 0x9da <__vector_10+0x34e>
			break;
     9e2:	0b cf       	rjmp	.-490    	; 0x7fa <__vector_10+0x16e>
				case 5: if (clock_mode != SNOOZE_MODE) { //set snooze mode
									clock_mode = SNOOZE_MODE;
									snooze_count = 10;
								}
								else {
									clock_mode = TIME_MODE; //else enter time mode
     9e4:	10 92 71 01 	sts	0x0171, r1
     9e8:	10 92 70 01 	sts	0x0170, r1
									snooze_count = 0;
     9ec:	10 92 6f 01 	sts	0x016F, r1
     9f0:	8e ce       	rjmp	.-740    	; 0x70e <__vector_10+0x82>

000009f2 <__vector_21>:

//******************************************************************************/
//																	ISR(ADC_vect)
//
//******************************************************************************/
ISR(ADC_vect) {
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
	OCR2 = (ADC >> 2); //generates waveform on the OC2 pin (shift right to account for 10-bit value)
     a00:	84 b1       	in	r24, 0x04	; 4
     a02:	95 b1       	in	r25, 0x05	; 5
     a04:	96 95       	lsr	r25
     a06:	87 95       	ror	r24
     a08:	96 95       	lsr	r25
     a0a:	87 95       	ror	r24
     a0c:	83 bd       	out	0x23, r24	; 35
	ADCSRA |= (1 << ADSC); //write start conversion bit for single conversion mode
     a0e:	36 9a       	sbi	0x06, 6	; 6
}
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__vector_8>:
//	}
//}
//******************************************************************************/
//																	ISR(INT7_vect)
//******************************************************************************/
ISR(INT7_vect) {STC_interrupt = TRUE;}
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	8f 93       	push	r24
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 1a 02 	sts	0x021A, r24
     a30:	8f 91       	pop	r24
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	81 11       	cpse	r24, r1
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <send_lcd+0x8>
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a46:	77 9b       	sbis	0x0e, 7	; 14
     a48:	fe cf       	rjmp	.-4      	; 0xa46 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     a4a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a4c:	77 9b       	sbis	0x0e, 7	; 14
     a4e:	fe cf       	rjmp	.-4      	; 0xa4c <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a50:	80 91 62 00 	lds	r24, 0x0062
     a54:	88 60       	ori	r24, 0x08	; 8
     a56:	80 93 62 00 	sts	0x0062, r24
     a5a:	80 91 62 00 	lds	r24, 0x0062
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	80 93 62 00 	sts	0x0062, r24
     a64:	08 95       	ret

00000a66 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15|
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|
//  -----------------------------------------------------------------
//
void refresh_lcd(char const* lcd_string_array) {
     a66:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     a68:	c0 91 8e 01 	lds	r28, 0x018E
     a6c:	8c 0f       	add	r24, r28
     a6e:	91 1d       	adc	r25, r1
     a70:	fc 01       	movw	r30, r24
     a72:	60 81       	ld	r22, Z
     a74:	61 11       	cpse	r22, r1
     a76:	11 c0       	rjmp	.+34     	; 0xa9a <refresh_lcd+0x34>
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	80 93 8d 01 	sts	0x018D, r24

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     a7e:	60 e2       	ldi	r22, 0x20	; 32
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	8c 0f       	add	r24, r28
     a8a:	80 93 8e 01 	sts	0x018E, r24

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     a8e:	80 31       	cpi	r24, 0x10	; 16
     a90:	d1 f0       	breq	.+52     	; 0xac6 <refresh_lcd+0x60>
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
			null_flag = 0;
  }
  else if(i == 32)
     a92:	80 32       	cpi	r24, 0x20	; 32
     a94:	51 f0       	breq	.+20     	; 0xaaa <refresh_lcd+0x44>
      _delay_us(40);
      line1_col1();
      null_flag=0;
      i=0;
  }
}//refresh_lcd
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     a9a:	80 91 8d 01 	lds	r24, 0x018D
     a9e:	81 11       	cpse	r24, r1
     aa0:	ee cf       	rjmp	.-36     	; 0xa7e <refresh_lcd+0x18>
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     aa8:	ee cf       	rjmp	.-36     	; 0xa86 <refresh_lcd+0x20>
     aaa:	85 ed       	ldi	r24, 0xD5	; 213
     aac:	8a 95       	dec	r24
     aae:	f1 f7       	brne	.-4      	; 0xaac <refresh_lcd+0x46>
     ab0:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     ab2:	60 e8       	ldi	r22, 0x80	; 128
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     aba:	10 92 8d 01 	sts	0x018D, r1
      i=0;
     abe:	10 92 8e 01 	sts	0x018E, r1
  }
}//refresh_lcd
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret
     ac6:	f5 ed       	ldi	r31, 0xD5	; 213
     ac8:	fa 95       	dec	r31
     aca:	f1 f7       	brne	.-4      	; 0xac8 <refresh_lcd+0x62>
     acc:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     ace:	60 ec       	ldi	r22, 0xC0	; 192
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
  if(i == 16)
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
			null_flag = 0;
     ad6:	10 92 8d 01 	sts	0x018D, r1
     ada:	dd cf       	rjmp	.-70     	; 0xa96 <refresh_lcd+0x30>

00000adc <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F
//map to 0x00 - 0x07) to display a custom character just refer to it's
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	1f 92       	push	r1
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     af0:	66 0f       	add	r22, r22
     af2:	66 0f       	add	r22, r22
     af4:	66 0f       	add	r22, r22
     af6:	60 5c       	subi	r22, 0xC0	; 192
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	99 83       	std	Y+1, r25	; 0x01
     afc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     b00:	85 ed       	ldi	r24, 0xD5	; 213
     b02:	8a 95       	dec	r24
     b04:	f1 f7       	brne	.-4      	; 0xb02 <set_custom_character+0x26>
     b06:	00 00       	nop
     b08:	e1 2e       	mov	r14, r17
     b0a:	99 81       	ldd	r25, Y+1	; 0x01
     b0c:	f9 2e       	mov	r15, r25
     b0e:	87 01       	movw	r16, r14
     b10:	08 5f       	subi	r16, 0xF8	; 248
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     b14:	f7 01       	movw	r30, r14
     b16:	61 91       	ld	r22, Z+
     b18:	7f 01       	movw	r14, r30
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     b20:	f5 ed       	ldi	r31, 0xD5	; 213
     b22:	fa 95       	dec	r31
     b24:	f1 f7       	brne	.-4      	; 0xb22 <set_custom_character+0x46>
     b26:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     b28:	e0 16       	cp	r14, r16
     b2a:	f1 06       	cpc	r15, r17
     b2c:	99 f7       	brne	.-26     	; 0xb14 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     b2e:	0f 90       	pop	r0
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     b3e:	90 e4       	ldi	r25, 0x40	; 64
     b40:	89 9f       	mul	r24, r25
     b42:	60 0d       	add	r22, r0
     b44:	11 24       	eor	r1, r1
     b46:	60 5c       	subi	r22, 0xC0	; 192
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000b4e <uint8_2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint8_2lcd(uint8_t number){
     b4e:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     b50:	88 23       	and	r24, r24
     b52:	b9 f1       	breq	.+110    	; 0xbc2 <uint8_2lcd+0x74>
     b54:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     b56:	84 36       	cpi	r24, 0x64	; 100
     b58:	98 f4       	brcc	.+38     	; 0xb80 <uint8_2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     b5a:	8a 30       	cpi	r24, 0x0A	; 10
     b5c:	d8 f4       	brcc	.+54     	; 0xb94 <uint8_2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     b5e:	8d ec       	ldi	r24, 0xCD	; 205
     b60:	c8 9f       	mul	r28, r24
     b62:	81 2d       	mov	r24, r1
     b64:	11 24       	eor	r1, r1
     b66:	86 95       	lsr	r24
     b68:	86 95       	lsr	r24
     b6a:	86 95       	lsr	r24
     b6c:	6c 2f       	mov	r22, r28
     b6e:	2a e0       	ldi	r18, 0x0A	; 10
     b70:	82 9f       	mul	r24, r18
     b72:	60 19       	sub	r22, r0
     b74:	11 24       	eor	r1, r1
     b76:	60 5d       	subi	r22, 0xD0	; 208
     b78:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     b7a:	cf 91       	pop	r28
void uint8_2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     b7c:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint8_2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     b80:	69 e2       	ldi	r22, 0x29	; 41
     b82:	86 9f       	mul	r24, r22
     b84:	61 2d       	mov	r22, r1
     b86:	11 24       	eor	r1, r1
     b88:	62 95       	swap	r22
     b8a:	6f 70       	andi	r22, 0x0F	; 15
     b8c:	60 5d       	subi	r22, 0xD0	; 208
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     b94:	89 e2       	ldi	r24, 0x29	; 41
     b96:	c8 9f       	mul	r28, r24
     b98:	81 2d       	mov	r24, r1
     b9a:	11 24       	eor	r1, r1
     b9c:	82 95       	swap	r24
     b9e:	8f 70       	andi	r24, 0x0F	; 15
     ba0:	9c 2f       	mov	r25, r28
     ba2:	24 e6       	ldi	r18, 0x64	; 100
     ba4:	82 9f       	mul	r24, r18
     ba6:	90 19       	sub	r25, r0
     ba8:	11 24       	eor	r1, r1
     baa:	6d ec       	ldi	r22, 0xCD	; 205
     bac:	96 9f       	mul	r25, r22
     bae:	61 2d       	mov	r22, r1
     bb0:	11 24       	eor	r1, r1
     bb2:	66 95       	lsr	r22
     bb4:	66 95       	lsr	r22
     bb6:	66 95       	lsr	r22
     bb8:	60 5d       	subi	r22, 0xD0	; 208
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     bc0:	ce cf       	rjmp	.-100    	; 0xb5e <uint8_2lcd+0x10>
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint8_2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     bc2:	60 e3       	ldi	r22, 0x30	; 48
     bc4:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     bc6:	cf 91       	pop	r28
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint8_2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     bc8:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000bcc <uint16_2lcd>:
//
//Takes a 16bit unsigned and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//TODO: optimize by removing the mod operators

void uint16_2lcd(uint16_t number){
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	09 f4       	brne	.+2      	; 0xbda <uint16_2lcd+0xe>
     bd8:	5b c0       	rjmp	.+182    	; 0xc90 <uint16_2lcd+0xc4>
     bda:	ec 01       	movw	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     bdc:	84 36       	cpi	r24, 0x64	; 100
     bde:	91 05       	cpc	r25, r1
     be0:	28 f5       	brcc	.+74     	; 0xc2c <uint16_2lcd+0x60>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     be2:	8a 30       	cpi	r24, 0x0A	; 10
     be4:	91 05       	cpc	r25, r1
     be6:	08 f0       	brcs	.+2      	; 0xbea <uint16_2lcd+0x1e>
     be8:	5b c0       	rjmp	.+182    	; 0xca0 <uint16_2lcd+0xd4>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     bea:	9e 01       	movw	r18, r28
     bec:	ad ec       	ldi	r26, 0xCD	; 205
     bee:	bc ec       	ldi	r27, 0xCC	; 204
     bf0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     bf4:	96 95       	lsr	r25
     bf6:	87 95       	ror	r24
     bf8:	96 95       	lsr	r25
     bfa:	87 95       	ror	r24
     bfc:	96 95       	lsr	r25
     bfe:	87 95       	ror	r24
     c00:	9c 01       	movw	r18, r24
     c02:	22 0f       	add	r18, r18
     c04:	33 1f       	adc	r19, r19
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	82 0f       	add	r24, r18
     c14:	93 1f       	adc	r25, r19
     c16:	c8 1b       	sub	r28, r24
     c18:	d9 0b       	sbc	r29, r25
     c1a:	6c 2f       	mov	r22, r28
     c1c:	60 5d       	subi	r22, 0xD0	; 208
     c1e:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
void uint16_2lcd(uint16_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     c28:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>
//TODO: optimize by removing the mod operators

void uint16_2lcd(uint16_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     c2c:	8c 01       	movw	r16, r24
     c2e:	16 95       	lsr	r17
     c30:	07 95       	ror	r16
     c32:	16 95       	lsr	r17
     c34:	07 95       	ror	r16
     c36:	98 01       	movw	r18, r16
     c38:	ab e7       	ldi	r26, 0x7B	; 123
     c3a:	b4 e1       	ldi	r27, 0x14	; 20
     c3c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     c40:	96 95       	lsr	r25
     c42:	87 95       	ror	r24
     c44:	60 e3       	ldi	r22, 0x30	; 48
     c46:	68 0f       	add	r22, r24
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     c4e:	98 01       	movw	r18, r16
     c50:	ab e7       	ldi	r26, 0x7B	; 123
     c52:	b4 e1       	ldi	r27, 0x14	; 20
     c54:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	44 e6       	ldi	r20, 0x64	; 100
     c5e:	48 9f       	mul	r20, r24
     c60:	90 01       	movw	r18, r0
     c62:	49 9f       	mul	r20, r25
     c64:	30 0d       	add	r19, r0
     c66:	11 24       	eor	r1, r1
     c68:	ce 01       	movw	r24, r28
     c6a:	82 1b       	sub	r24, r18
     c6c:	93 0b       	sbc	r25, r19
     c6e:	9c 01       	movw	r18, r24
     c70:	ad ec       	ldi	r26, 0xCD	; 205
     c72:	bc ec       	ldi	r27, 0xCC	; 204
     c74:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	96 95       	lsr	r25
     c7e:	87 95       	ror	r24
     c80:	96 95       	lsr	r25
     c82:	87 95       	ror	r24
     c84:	60 e3       	ldi	r22, 0x30	; 48
     c86:	68 0f       	add	r22, r24
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     c8e:	ad cf       	rjmp	.-166    	; 0xbea <uint16_2lcd+0x1e>
//Takes a 16bit unsigned and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//TODO: optimize by removing the mod operators

void uint16_2lcd(uint16_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     c90:	60 e3       	ldi	r22, 0x30	; 48
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     c92:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
void uint16_2lcd(uint16_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     c9c:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>
     ca0:	8c 01       	movw	r16, r24
     ca2:	16 95       	lsr	r17
     ca4:	07 95       	ror	r16
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	d1 cf       	rjmp	.-94     	; 0xc4e <uint16_2lcd+0x82>

00000cac <int2lcd>:
//                          int2lcd
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
     cac:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint8_2lcd(~number+1);}
     cae:	87 fd       	sbrc	r24, 7
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <int2lcd+0xc>
    else          {uint8_2lcd(number);                                            }
}
     cb2:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint8_2lcd(~number+1);}
    else          {uint8_2lcd(number);                                            }
     cb4:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <uint8_2lcd>
     cb8:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint8_2lcd(~number+1);}
     cba:	6d e2       	ldi	r22, 0x2D	; 45
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     cc2:	85 ed       	ldi	r24, 0xD5	; 213
     cc4:	8a 95       	dec	r24
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <int2lcd+0x18>
     cc8:	00 00       	nop
     cca:	8c 2f       	mov	r24, r28
     ccc:	81 95       	neg	r24
    else          {uint8_2lcd(number);                                            }
}
     cce:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint8_2lcd(~number+1);}
     cd0:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <uint8_2lcd>

00000cd4 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     cd4:	6e e0       	ldi	r22, 0x0E	; 14
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000cdc <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     cdc:	6c e0       	ldi	r22, 0x0C	; 12
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000ce4 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     ce4:	6e e1       	ldi	r22, 0x1E	; 30
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000cec <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     cec:	68 e1       	ldi	r22, 0x18	; 24
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000cf4 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cf4:	e2 e6       	ldi	r30, 0x62	; 98
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	80 83       	st	Z, r24
     cfe:	80 81       	ld	r24, Z
     d00:	87 7f       	andi	r24, 0xF7	; 247
     d02:	80 83       	st	Z, r24
     d04:	08 95       	ret

00000d06 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     d0e:	8f e1       	ldi	r24, 0x1F	; 31
     d10:	9c e1       	ldi	r25, 0x1C	; 28
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	f1 f7       	brne	.-4      	; 0xd12 <clear_display+0xc>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <clear_display+0x12>
     d18:	00 00       	nop
     d1a:	08 95       	ret

00000d1c <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
     d1c:	62 e0       	ldi	r22, 0x02	; 2
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     d24:	8f e6       	ldi	r24, 0x6F	; 111
     d26:	97 e1       	ldi	r25, 0x17	; 23
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <cursor_home+0xc>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <cursor_home+0x12>
     d2e:	00 00       	nop
     d30:	08 95       	ret

00000d32 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     d32:	60 ec       	ldi	r22, 0xC0	; 192
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000d3a <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     d3a:	60 e8       	ldi	r22, 0x80	; 128
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000d42 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
     d42:	cf 93       	push	r28
     d44:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' ');
     d46:	60 e2       	ldi	r22, 0x20	; 32
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     d4e:	85 ed       	ldi	r24, 0xD5	; 213
     d50:	8a 95       	dec	r24
     d52:	f1 f7       	brne	.-4      	; 0xd50 <fill_spaces+0xe>
     d54:	00 00       	nop
     d56:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     d58:	b1 f7       	brne	.-20     	; 0xd46 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <char2lcd>:
//                            char2lcd
//
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);}
     d5e:	68 2f       	mov	r22, r24
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <send_lcd>

00000d66 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	c0 e0       	ldi	r28, 0x00	; 0
     d74:	f8 01       	movw	r30, r16
     d76:	e4 0f       	add	r30, r20
     d78:	f5 1f       	adc	r31, r21
     d7a:	60 81       	ld	r22, Z
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     d82:	85 ed       	ldi	r24, 0xD5	; 213
     d84:	8a 95       	dec	r24
     d86:	f1 f7       	brne	.-4      	; 0xd84 <string2lcd+0x1e>
     d88:	00 00       	nop
     d8a:	cf 5f       	subi	r28, 0xFF	; 255
     d8c:	4c 2f       	mov	r20, r28
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	f8 01       	movw	r30, r16
     d92:	01 90       	ld	r0, Z+
     d94:	00 20       	and	r0, r0
     d96:	e9 f7       	brne	.-6      	; 0xd92 <string2lcd+0x2c>
     d98:	9f 01       	movw	r18, r30
     d9a:	20 1b       	sub	r18, r16
     d9c:	31 0b       	sbc	r19, r17
     d9e:	22 50       	subi	r18, 0x02	; 2
     da0:	31 09       	sbc	r19, r1
     da2:	24 17       	cp	r18, r20
     da4:	35 07       	cpc	r19, r21
     da6:	30 f7       	brcc	.-52     	; 0xd74 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }
}
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	08 95       	ret

00000db0 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	99 ef       	ldi	r25, 0xF9	; 249
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <lcd_init+0x4>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <lcd_init+0xa>
     dba:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     dbc:	88 e0       	ldi	r24, 0x08	; 8
     dbe:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times
     dc2:	60 e3       	ldi	r22, 0x30	; 48
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     dca:	8f e5       	ldi	r24, 0x5F	; 95
     dcc:	9d e6       	ldi	r25, 0x6D	; 109
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <lcd_init+0x1e>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <lcd_init+0x24>
     dd4:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     dd6:	60 e3       	ldi	r22, 0x30	; 48
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     dde:	8f e5       	ldi	r24, 0x5F	; 95
     de0:	9d e6       	ldi	r25, 0x6D	; 109
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <lcd_init+0x32>
     de6:	00 c0       	rjmp	.+0      	; 0xde8 <lcd_init+0x38>
     de8:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     dea:	60 e3       	ldi	r22, 0x30	; 48
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     df2:	8f e5       	ldi	r24, 0x5F	; 95
     df4:	9d e6       	ldi	r25, 0x6D	; 109
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <lcd_init+0x46>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <lcd_init+0x4c>
     dfc:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
     dfe:	68 e3       	ldi	r22, 0x38	; 56
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     e06:	8f e1       	ldi	r24, 0x1F	; 31
     e08:	9e e4       	ldi	r25, 0x4E	; 78
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <lcd_init+0x5a>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <lcd_init+0x60>
     e10:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
     e12:	68 e0       	ldi	r22, 0x08	; 8
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     e1a:	8f e1       	ldi	r24, 0x1F	; 31
     e1c:	9e e4       	ldi	r25, 0x4E	; 78
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <lcd_init+0x6e>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <lcd_init+0x74>
     e24:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     e2e:	8f e1       	ldi	r24, 0x1F	; 31
     e30:	9e e4       	ldi	r25, 0x4E	; 78
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <lcd_init+0x82>
     e36:	00 c0       	rjmp	.+0      	; 0xe38 <lcd_init+0x88>
     e38:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
     e3a:	66 e0       	ldi	r22, 0x06	; 6
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     e42:	8f e1       	ldi	r24, 0x1F	; 31
     e44:	9e e4       	ldi	r25, 0x4E	; 78
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <lcd_init+0x96>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <lcd_init+0x9c>
     e4c:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
     e4e:	6c e0       	ldi	r22, 0x0C	; 12
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
     e56:	8f e1       	ldi	r24, 0x1F	; 31
     e58:	9e e4       	ldi	r25, 0x4E	; 78
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <lcd_init+0xaa>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <lcd_init+0xb0>
     e60:	00 00       	nop
     e62:	08 95       	ret

00000e64 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	69 97       	sbiw	r28, 0x19	; 25
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	f4 2e       	mov	r15, r20
     e8e:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
     e90:	00 23       	and	r16, r16
     e92:	59 f0       	breq	.+22     	; 0xeaa <lcd_int32+0x46>
        bSigned = (qr.quot<0);
     e94:	4b 01       	movw	r8, r22
     e96:	5c 01       	movw	r10, r24
     e98:	88 24       	eor	r8, r8
     e9a:	b7 fc       	sbrc	r11, 7
     e9c:	83 94       	inc	r8
     e9e:	99 24       	eor	r9, r9
     ea0:	aa 24       	eor	r10, r10
     ea2:	bb 24       	eor	r11, r11
     ea4:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
     ea6:	97 fd       	sbrc	r25, 7
     ea8:	8f c0       	rjmp	.+286    	; 0xfc8 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point
      if (decpos){
     eaa:	11 23       	and	r17, r17
     eac:	09 f4       	brne	.+2      	; 0xeb0 <lcd_int32+0x4c>
     eae:	84 c0       	rjmp	.+264    	; 0xfb8 <lcd_int32+0x154>
     eb0:	9e 01       	movw	r18, r28
     eb2:	2f 5f       	subi	r18, 0xFF	; 255
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	69 01       	movw	r12, r18
     eb8:	59 01       	movw	r10, r18
     eba:	88 24       	eor	r8, r8
     ebc:	8a 94       	dec	r8
     ebe:	81 0e       	add	r8, r17
     ec0:	91 2c       	mov	r9, r1
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
     ec4:	83 1a       	sub	r8, r19
     ec6:	93 0a       	sbc	r9, r19
     ec8:	8c 0c       	add	r8, r12
     eca:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     ecc:	2a e0       	ldi	r18, 0x0A	; 10
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divmodsi4>
     ed8:	e6 2f       	mov	r30, r22
     eda:	2a 8b       	std	Y+18, r18	; 0x12
     edc:	3b 8b       	std	Y+19, r19	; 0x13
     ede:	4c 8b       	std	Y+20, r20	; 0x14
     ee0:	5d 8b       	std	Y+21, r21	; 0x15
     ee2:	6a 89       	ldd	r22, Y+18	; 0x12
     ee4:	7b 89       	ldd	r23, Y+19	; 0x13
     ee6:	8c 89       	ldd	r24, Y+20	; 0x14
     ee8:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     eea:	20 e3       	ldi	r18, 0x30	; 48
     eec:	2e 0f       	add	r18, r30
     eee:	f5 01       	movw	r30, r10
     ef0:	21 93       	st	Z+, r18
     ef2:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
     ef4:	e8 15       	cp	r30, r8
     ef6:	f9 05       	cpc	r31, r9
     ef8:	49 f7       	brne	.-46     	; 0xecc <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     efa:	bb 24       	eor	r11, r11
     efc:	b3 94       	inc	r11
     efe:	b1 0e       	add	r11, r17
     f00:	f6 01       	movw	r30, r12
     f02:	e1 0f       	add	r30, r17
     f04:	f1 1d       	adc	r31, r1
     f06:	2e e2       	ldi	r18, 0x2E	; 46
     f08:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
     f0a:	2a e0       	ldi	r18, 0x0A	; 10
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divmodsi4>
     f16:	e6 2f       	mov	r30, r22
     f18:	2a 8b       	std	Y+18, r18	; 0x12
     f1a:	3b 8b       	std	Y+19, r19	; 0x13
     f1c:	4c 8b       	std	Y+20, r20	; 0x14
     f1e:	5d 8b       	std	Y+21, r21	; 0x15
     f20:	6e 8b       	std	Y+22, r22	; 0x16
     f22:	7f 8b       	std	Y+23, r23	; 0x17
     f24:	88 8f       	std	Y+24, r24	; 0x18
     f26:	99 8f       	std	Y+25, r25	; 0x19
     f28:	6a 89       	ldd	r22, Y+18	; 0x12
     f2a:	7b 89       	ldd	r23, Y+19	; 0x13
     f2c:	8c 89       	ldd	r24, Y+20	; 0x14
     f2e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     f30:	11 e0       	ldi	r17, 0x01	; 1
     f32:	1b 0d       	add	r17, r11
     f34:	d6 01       	movw	r26, r12
     f36:	ab 0d       	add	r26, r11
     f38:	b1 1d       	adc	r27, r1
     f3a:	e0 5d       	subi	r30, 0xD0	; 208
     f3c:	ec 93       	st	X, r30
     f3e:	b1 2e       	mov	r11, r17
        }while(qr.quot);
     f40:	61 15       	cp	r22, r1
     f42:	71 05       	cpc	r23, r1
     f44:	81 05       	cpc	r24, r1
     f46:	91 05       	cpc	r25, r1
     f48:	01 f7       	brne	.-64     	; 0xf0a <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
     f4a:	ff 20       	and	r15, r15
     f4c:	61 f0       	breq	.+24     	; 0xf66 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     f4e:	e1 10       	cpse	r14, r1
     f50:	39 c0       	rjmp	.+114    	; 0xfc4 <lcd_int32+0x160>
     f52:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     f54:	1f 15       	cp	r17, r15
     f56:	38 f4       	brcc	.+14     	; 0xf66 <lcd_int32+0x102>
     f58:	f6 01       	movw	r30, r12
     f5a:	e1 0f       	add	r30, r17
     f5c:	f1 1d       	adc	r31, r1
     f5e:	80 83       	st	Z, r24
     f60:	1f 5f       	subi	r17, 0xFF	; 255
     f62:	1f 11       	cpse	r17, r15
     f64:	f9 cf       	rjmp	.-14     	; 0xf58 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     f66:	00 23       	and	r16, r16
     f68:	31 f0       	breq	.+12     	; 0xf76 <lcd_int32+0x112>
     f6a:	f6 01       	movw	r30, r12
     f6c:	e1 0f       	add	r30, r17
     f6e:	f1 1d       	adc	r31, r1
     f70:	8d e2       	ldi	r24, 0x2D	; 45
     f72:	80 83       	st	Z, r24
     f74:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     f76:	11 50       	subi	r17, 0x01	; 1
     f78:	f6 01       	movw	r30, r12
     f7a:	e1 0f       	add	r30, r17
     f7c:	f1 1d       	adc	r31, r1
     f7e:	60 81       	ld	r22, Z
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f86:	35 ed       	ldi	r19, 0xD5	; 213
     f88:	3a 95       	dec	r19
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <lcd_int32+0x124>
     f8c:	00 00       	nop
     f8e:	11 11       	cpse	r17, r1
     f90:	f2 cf       	rjmp	.-28     	; 0xf76 <lcd_int32+0x112>

}
     f92:	69 96       	adiw	r28, 0x19	; 25
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	bf 90       	pop	r11
     fb0:	af 90       	pop	r10
     fb2:	9f 90       	pop	r9
     fb4:	8f 90       	pop	r8
     fb6:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     fb8:	b1 2c       	mov	r11, r1
     fba:	9e 01       	movw	r18, r28
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	69 01       	movw	r12, r18
     fc2:	a3 cf       	rjmp	.-186    	; 0xf0a <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     fc4:	80 e3       	ldi	r24, 0x30	; 48
     fc6:	c6 cf       	rjmp	.-116    	; 0xf54 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     fc8:	90 95       	com	r25
     fca:	80 95       	com	r24
     fcc:	70 95       	com	r23
     fce:	61 95       	neg	r22
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	8f 4f       	sbci	r24, 0xFF	; 255
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	69 cf       	rjmp	.-302    	; 0xeaa <lcd_int32+0x46>

00000fd8 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
     fd8:	5f 92       	push	r5
     fda:	6f 92       	push	r6
     fdc:	7f 92       	push	r7
     fde:	8f 92       	push	r8
     fe0:	9f 92       	push	r9
     fe2:	af 92       	push	r10
     fe4:	bf 92       	push	r11
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	61 97       	sbiw	r28, 0x11	; 17
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	a6 2e       	mov	r10, r22
    1008:	54 2e       	mov	r5, r20
    100a:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    100c:	79 2e       	mov	r7, r25
    100e:	77 1c       	adc	r7, r7
    1010:	77 24       	eor	r7, r7
    1012:	77 1c       	adc	r7, r7
    1014:	b7 2c       	mov	r11, r7
    1016:	c7 2c       	mov	r12, r7
    1018:	d1 2c       	mov	r13, r1
    101a:	ee 27       	eor	r30, r30
    101c:	ff 27       	eor	r31, r31
    101e:	ec 19       	sub	r30, r12
    1020:	fd 09       	sbc	r31, r13
    1022:	8e 27       	eor	r24, r30
    1024:	9f 27       	eor	r25, r31
    1026:	fc 01       	movw	r30, r24
    1028:	ec 0d       	add	r30, r12
    102a:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    102c:	44 23       	and	r20, r20
    102e:	09 f4       	brne	.+2      	; 0x1032 <lcd_int16+0x5a>
    1030:	8e c0       	rjmp	.+284    	; 0x114e <__stack+0x4f>
    1032:	ce 01       	movw	r24, r28
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	7c 01       	movw	r14, r24
    1038:	8c 01       	movw	r16, r24
    103a:	88 24       	eor	r8, r8
    103c:	8a 94       	dec	r8
    103e:	84 0e       	add	r8, r20
    1040:	91 2c       	mov	r9, r1
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	89 1a       	sub	r8, r25
    1046:	99 0a       	sbc	r9, r25
    1048:	8e 0c       	add	r8, r14
    104a:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    104c:	6a e0       	ldi	r22, 0x0A	; 10
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	cf 01       	movw	r24, r30
    1052:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divmodhi4>
    1056:	26 2f       	mov	r18, r22
    1058:	e2 2f       	mov	r30, r18
    105a:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    105c:	80 5d       	subi	r24, 0xD0	; 208
    105e:	d8 01       	movw	r26, r16
    1060:	8d 93       	st	X+, r24
    1062:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    1064:	a8 15       	cp	r26, r8
    1066:	b9 05       	cpc	r27, r9
    1068:	89 f7       	brne	.-30     	; 0x104c <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    106a:	01 e0       	ldi	r16, 0x01	; 1
    106c:	05 0d       	add	r16, r5
    106e:	d7 01       	movw	r26, r14
    1070:	a5 0d       	add	r26, r5
    1072:	b1 1d       	adc	r27, r1
    1074:	8e e2       	ldi	r24, 0x2E	; 46
    1076:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    1078:	6a e0       	ldi	r22, 0x0A	; 10
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	cf 01       	movw	r24, r30
    107e:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divmodhi4>
    1082:	26 2f       	mov	r18, r22
    1084:	e2 2f       	mov	r30, r18
    1086:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    1088:	11 e0       	ldi	r17, 0x01	; 1
    108a:	10 0f       	add	r17, r16
    108c:	d7 01       	movw	r26, r14
    108e:	a0 0f       	add	r26, r16
    1090:	b1 1d       	adc	r27, r1
    1092:	80 5d       	subi	r24, 0xD0	; 208
    1094:	8c 93       	st	X, r24
    1096:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    1098:	30 97       	sbiw	r30, 0x00	; 0
    109a:	71 f7       	brne	.-36     	; 0x1078 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    109c:	61 10       	cpse	r6, r1
    109e:	15 c0       	rjmp	.+42     	; 0x10ca <lcd_int16+0xf2>
    10a0:	77 20       	and	r7, r7
    10a2:	39 f0       	breq	.+14     	; 0x10b2 <lcd_int16+0xda>
        {
                sline[i++] = '-';
    10a4:	11 e0       	ldi	r17, 0x01	; 1
    10a6:	10 0f       	add	r17, r16
    10a8:	f7 01       	movw	r30, r14
    10aa:	e0 0f       	add	r30, r16
    10ac:	f1 1d       	adc	r31, r1
    10ae:	8d e2       	ldi	r24, 0x2D	; 45
    10b0:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    10b2:	aa 20       	and	r10, r10
    10b4:	41 f1       	breq	.+80     	; 0x1106 <__stack+0x7>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    10b6:	81 2f       	mov	r24, r17
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	2a 2d       	mov	r18, r10
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	82 17       	cp	r24, r18
    10c0:	93 07       	cpc	r25, r19
    10c2:	0c f5       	brge	.+66     	; 0x1106 <__stack+0x7>
    10c4:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    10ca:	aa 20       	and	r10, r10
    10cc:	a1 f0       	breq	.+40     	; 0x10f6 <lcd_int16+0x11e>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    10ce:	81 2f       	mov	r24, r17
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	2a 2d       	mov	r18, r10
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	2c 19       	sub	r18, r12
    10d8:	3d 09       	sbc	r19, r13
    10da:	82 17       	cp	r24, r18
    10dc:	93 07       	cpc	r25, r19
    10de:	5c f4       	brge	.+22     	; 0x10f6 <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    10e0:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    10e2:	1f 5f       	subi	r17, 0xFF	; 255
    10e4:	f7 01       	movw	r30, r14
    10e6:	e8 0f       	add	r30, r24
    10e8:	f9 1f       	adc	r31, r25
    10ea:	40 83       	st	Z, r20
    10ec:	81 2f       	mov	r24, r17
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	82 17       	cp	r24, r18
    10f2:	93 07       	cpc	r25, r19
    10f4:	b4 f3       	brlt	.-20     	; 0x10e2 <lcd_int16+0x10a>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    10f6:	bb 20       	and	r11, r11
    10f8:	31 f0       	breq	.+12     	; 0x1106 <__stack+0x7>
    10fa:	f7 01       	movw	r30, r14
    10fc:	e1 0f       	add	r30, r17
    10fe:	f1 1d       	adc	r31, r1
    1100:	8d e2       	ldi	r24, 0x2D	; 45
    1102:	80 83       	st	Z, r24
    1104:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1106:	11 50       	subi	r17, 0x01	; 1
    1108:	f7 01       	movw	r30, r14
    110a:	e1 0f       	add	r30, r17
    110c:	f1 1d       	adc	r31, r1
    110e:	60 81       	ld	r22, Z
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	0e 94 1e 05 	call	0xa3c	; 0xa3c <send_lcd>
    1116:	95 ed       	ldi	r25, 0xD5	; 213
    1118:	9a 95       	dec	r25
    111a:	f1 f7       	brne	.-4      	; 0x1118 <__stack+0x19>
    111c:	00 00       	nop
    111e:	11 11       	cpse	r17, r1
    1120:	f2 cf       	rjmp	.-28     	; 0x1106 <__stack+0x7>
}
    1122:	61 96       	adiw	r28, 0x11	; 17
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	bf 90       	pop	r11
    1140:	af 90       	pop	r10
    1142:	9f 90       	pop	r9
    1144:	8f 90       	pop	r8
    1146:	7f 90       	pop	r7
    1148:	6f 90       	pop	r6
    114a:	5f 90       	pop	r5
    114c:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    114e:	00 e0       	ldi	r16, 0x00	; 0
    1150:	ce 01       	movw	r24, r28
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	7c 01       	movw	r14, r24
    1156:	90 cf       	rjmp	.-224    	; 0x1078 <lcd_int16+0xa0>

00001158 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	0b b6       	in	r0, 0x3b	; 59
    1164:	0f 92       	push	r0
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1176:	e0 91 71 00 	lds	r30, 0x0071
    117a:	8e 2f       	mov	r24, r30
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	fc 01       	movw	r30, r24
    1180:	38 97       	sbiw	r30, 0x08	; 8
    1182:	e1 35       	cpi	r30, 0x51	; 81
    1184:	f1 05       	cpc	r31, r1
    1186:	b0 f0       	brcs	.+44     	; 0x11b4 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1188:	80 91 71 00 	lds	r24, 0x0071
    118c:	80 93 f4 01 	sts	0x01F4, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    1196:	ff 91       	pop	r31
    1198:	ef 91       	pop	r30
    119a:	bf 91       	pop	r27
    119c:	af 91       	pop	r26
    119e:	9f 91       	pop	r25
    11a0:	8f 91       	pop	r24
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0b be       	out	0x3b, r0	; 59
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    11b4:	ec 5a       	subi	r30, 0xAC	; 172
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    11bc:	80 91 8f 01 	lds	r24, 0x018F
    11c0:	e0 91 f5 01 	lds	r30, 0x01F5
    11c4:	f0 91 f6 01 	lds	r31, 0x01F6
    11c8:	e8 0f       	add	r30, r24
    11ca:	f1 1d       	adc	r31, r1
    11cc:	80 91 73 00 	lds	r24, 0x0073
    11d0:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    11d2:	84 e9       	ldi	r24, 0x94	; 148
    11d4:	80 93 74 00 	sts	0x0074, r24
      break;      
    11d8:	de cf       	rjmp	.-68     	; 0x1196 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    11da:	80 91 f7 01 	lds	r24, 0x01F7
    11de:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    11e2:	10 92 8f 01 	sts	0x018F, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    11e6:	85 e8       	ldi	r24, 0x85	; 133
    11e8:	80 93 74 00 	sts	0x0074, r24
      break;
    11ec:	d4 cf       	rjmp	.-88     	; 0x1196 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    11ee:	80 91 8f 01 	lds	r24, 0x018F
    11f2:	90 91 f8 01 	lds	r25, 0x01F8
    11f6:	89 17       	cp	r24, r25
    11f8:	60 f7       	brcc	.-40     	; 0x11d2 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    11fa:	e0 91 f5 01 	lds	r30, 0x01F5
    11fe:	f0 91 f6 01 	lds	r31, 0x01F6
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	98 0f       	add	r25, r24
    1206:	90 93 8f 01 	sts	0x018F, r25
    120a:	e8 0f       	add	r30, r24
    120c:	f1 1d       	adc	r31, r1
    120e:	80 81       	ld	r24, Z
    1210:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    1214:	85 e8       	ldi	r24, 0x85	; 133
    1216:	80 93 74 00 	sts	0x0074, r24
    121a:	bd cf       	rjmp	.-134    	; 0x1196 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    121c:	85 ea       	ldi	r24, 0xA5	; 165
    121e:	80 93 74 00 	sts	0x0074, r24
      break;
    1222:	b9 cf       	rjmp	.-142    	; 0x1196 <__vector_33+0x3e>
    1224:	20 91 8f 01 	lds	r18, 0x018F
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1228:	80 91 f8 01 	lds	r24, 0x01F8
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	28 17       	cp	r18, r24
    1234:	39 07       	cpc	r19, r25
    1236:	dc f4       	brge	.+54     	; 0x126e <__vector_33+0x116>
    1238:	85 ec       	ldi	r24, 0xC5	; 197
    123a:	80 93 74 00 	sts	0x0074, r24
    123e:	ab cf       	rjmp	.-170    	; 0x1196 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    1240:	e0 91 f5 01 	lds	r30, 0x01F5
    1244:	f0 91 f6 01 	lds	r31, 0x01F6
    1248:	80 91 8f 01 	lds	r24, 0x018F
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	28 0f       	add	r18, r24
    1250:	20 93 8f 01 	sts	0x018F, r18
    1254:	e8 0f       	add	r30, r24
    1256:	f1 1d       	adc	r31, r1
    1258:	80 91 73 00 	lds	r24, 0x0073
    125c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    125e:	80 91 f8 01 	lds	r24, 0x01F8
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	2c f3       	brlt	.-54     	; 0x1238 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    126e:	85 e8       	ldi	r24, 0x85	; 133
    1270:	80 93 74 00 	sts	0x0074, r24
    1274:	90 cf       	rjmp	.-224    	; 0x1196 <__vector_33+0x3e>

00001276 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1276:	80 91 74 00 	lds	r24, 0x0074
}
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	08 95       	ret

0000127e <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    127e:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    1282:	90 fd       	sbrc	r25, 0
    1284:	fc cf       	rjmp	.-8      	; 0x127e <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1286:	8e 7f       	andi	r24, 0xFE	; 254
    1288:	80 93 f7 01 	sts	0x01F7, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    128c:	70 93 f6 01 	sts	0x01F6, r23
    1290:	60 93 f5 01 	sts	0x01F5, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    1294:	40 93 f8 01 	sts	0x01F8, r20
  TWCR = TWCR_START;                    //initiate START
    1298:	85 ea       	ldi	r24, 0xA5	; 165
    129a:	80 93 74 00 	sts	0x0074, r24
    129e:	08 95       	ret

000012a0 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    12a0:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    12a4:	90 fd       	sbrc	r25, 0
    12a6:	fc cf       	rjmp	.-8      	; 0x12a0 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	80 93 f7 01 	sts	0x01F7, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    12ae:	70 93 f6 01 	sts	0x01F6, r23
    12b2:	60 93 f5 01 	sts	0x01F5, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    12b6:	40 93 f8 01 	sts	0x01F8, r20
  TWCR = TWCR_START;                   //initiate START
    12ba:	85 ea       	ldi	r24, 0xA5	; 165
    12bc:	80 93 74 00 	sts	0x0074, r24
    12c0:	08 95       	ret

000012c2 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    12c8:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    12cc:	8c e0       	ldi	r24, 0x0C	; 12
    12ce:	80 93 70 00 	sts	0x0070, r24
    12d2:	08 95       	ret

000012d4 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    12d4:	84 e1       	ldi	r24, 0x14	; 20
    12d6:	80 93 f9 01 	sts	0x01F9, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	69 ef       	ldi	r22, 0xF9	; 249
    12de:	71 e0       	ldi	r23, 0x01	; 1
    12e0:	82 e2       	ldi	r24, 0x22	; 34
    12e2:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    12e6:	0e 94 3b 09 	call	0x1276	; 0x1276 <twi_busy>
    12ea:	81 11       	cpse	r24, r1
    12ec:	fc cf       	rjmp	.-8      	; 0x12e6 <get_int_status+0x12>
    12ee:	8f ea       	ldi	r24, 0xAF	; 175
    12f0:	94 e0       	ldi	r25, 0x04	; 4
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <get_int_status+0x1e>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <get_int_status+0x24>
    12f8:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	6b e1       	ldi	r22, 0x1B	; 27
    12fe:	72 e0       	ldi	r23, 0x02	; 2
    1300:	82 e2       	ldi	r24, 0x22	; 34
    1302:	0e 94 50 09 	call	0x12a0	; 0x12a0 <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1306:	0e 94 3b 09 	call	0x1276	; 0x1276 <twi_busy>
    130a:	81 11       	cpse	r24, r1
    130c:	fc cf       	rjmp	.-8      	; 0x1306 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    130e:	80 91 1b 02 	lds	r24, 0x021B
    1312:	08 95       	ret

00001314 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    1314:	80 e2       	ldi	r24, 0x20	; 32
    1316:	80 93 f9 01 	sts	0x01F9, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    131a:	10 92 fa 01 	sts	0x01FA, r1
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    131e:	80 91 aa 01 	lds	r24, 0x01AA
    1322:	90 91 ab 01 	lds	r25, 0x01AB
    1326:	90 93 fb 01 	sts	0x01FB, r25
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    132a:	80 91 aa 01 	lds	r24, 0x01AA
    132e:	90 91 ab 01 	lds	r25, 0x01AB
    1332:	80 93 fc 01 	sts	0x01FC, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    1336:	10 92 fd 01 	sts	0x01FD, r1
  //send fm tune command
  STC_interrupt = FALSE;
    133a:	10 92 1a 02 	sts	0x021A, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    133e:	45 e0       	ldi	r20, 0x05	; 5
    1340:	69 ef       	ldi	r22, 0xF9	; 249
    1342:	71 e0       	ldi	r23, 0x01	; 1
    1344:	82 e2       	ldi	r24, 0x22	; 34
    1346:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    134a:	80 91 1a 02 	lds	r24, 0x021A
    134e:	88 23       	and	r24, r24
    1350:	e1 f3       	breq	.-8      	; 0x134a <fm_tune_freq+0x36>
}
    1352:	08 95       	ret

00001354 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    1354:	80 e4       	ldi	r24, 0x40	; 64
    1356:	80 93 f9 01 	sts	0x01F9, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    135a:	10 92 fa 01 	sts	0x01FA, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    135e:	80 91 a8 01 	lds	r24, 0x01A8
    1362:	90 91 a9 01 	lds	r25, 0x01A9
    1366:	90 93 fb 01 	sts	0x01FB, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    136a:	80 93 fc 01 	sts	0x01FC, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    136e:	10 92 fd 01 	sts	0x01FD, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    1372:	10 92 fe 01 	sts	0x01FE, r1
  //send am tune command
  STC_interrupt = FALSE;
    1376:	10 92 1a 02 	sts	0x021A, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    137a:	46 e0       	ldi	r20, 0x06	; 6
    137c:	69 ef       	ldi	r22, 0xF9	; 249
    137e:	71 e0       	ldi	r23, 0x01	; 1
    1380:	82 e2       	ldi	r24, 0x22	; 34
    1382:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    1386:	80 91 1a 02 	lds	r24, 0x021A
    138a:	88 23       	and	r24, r24
    138c:	e1 f3       	breq	.-8      	; 0x1386 <am_tune_freq+0x32>
}
    138e:	08 95       	ret

00001390 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    1390:	e9 ef       	ldi	r30, 0xF9	; 249
    1392:	f1 e0       	ldi	r31, 0x01	; 1
    1394:	80 e4       	ldi	r24, 0x40	; 64
    1396:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    1398:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    139a:	80 91 bc 01 	lds	r24, 0x01BC
    139e:	90 91 bd 01 	lds	r25, 0x01BD
    13a2:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    13a4:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    13a6:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    13ac:	46 e0       	ldi	r20, 0x06	; 6
    13ae:	bf 01       	movw	r22, r30
    13b0:	82 e2       	ldi	r24, 0x22	; 34
    13b2:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13b6:	2f ef       	ldi	r18, 0xFF	; 255
    13b8:	87 ee       	ldi	r24, 0xE7	; 231
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	21 50       	subi	r18, 0x01	; 1
    13be:	80 40       	sbci	r24, 0x00	; 0
    13c0:	90 40       	sbci	r25, 0x00	; 0
    13c2:	e1 f7       	brne	.-8      	; 0x13bc <sw_tune_freq+0x2c>
    13c4:	00 c0       	rjmp	.+0      	; 0x13c6 <sw_tune_freq+0x36>
    13c6:	00 00       	nop
    13c8:	08 95       	ret

000013ca <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
    13ca:	80 91 66 01 	lds	r24, 0x0166
    13ce:	90 91 67 01 	lds	r25, 0x0167
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	51 f1       	breq	.+84     	; 0x142c <radio_pwr_dwn+0x62>
    13d8:	00 f1       	brcs	.+64     	; 0x141a <radio_pwr_dwn+0x50>
    13da:	02 97       	sbiw	r24, 0x02	; 2
    13dc:	41 f4       	brne	.+16     	; 0x13ee <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
    13de:	60 91 bc 01 	lds	r22, 0x01BC
    13e2:	70 91 bd 01 	lds	r23, 0x01BD
    13e6:	8e eb       	ldi	r24, 0xBE	; 190
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
    13ee:	60 91 a7 01 	lds	r22, 0x01A7
    13f2:	80 e9       	ldi	r24, 0x90	; 144
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    13fa:	81 e1       	ldi	r24, 0x11	; 17
    13fc:	80 93 f9 01 	sts	0x01F9, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	69 ef       	ldi	r22, 0xF9	; 249
    1404:	71 e0       	ldi	r23, 0x01	; 1
    1406:	82 e2       	ldi	r24, 0x22	; 34
    1408:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    140c:	87 ed       	ldi	r24, 0xD7	; 215
    140e:	94 e0       	ldi	r25, 0x04	; 4
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <radio_pwr_dwn+0x46>
    1414:	00 c0       	rjmp	.+0      	; 0x1416 <radio_pwr_dwn+0x4c>
    1416:	00 00       	nop
    1418:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
    141a:	60 91 aa 01 	lds	r22, 0x01AA
    141e:	70 91 ab 01 	lds	r23, 0x01AB
    1422:	81 e9       	ldi	r24, 0x91	; 145
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <eeprom_write_word>
    142a:	e1 cf       	rjmp	.-62     	; 0x13ee <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
    142c:	60 91 a8 01 	lds	r22, 0x01A8
    1430:	70 91 a9 01 	lds	r23, 0x01A9
    1434:	85 ea       	ldi	r24, 0xA5	; 165
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <eeprom_write_word>
    143c:	d8 cf       	rjmp	.-80     	; 0x13ee <radio_pwr_dwn+0x24>

0000143e <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    143e:	83 e2       	ldi	r24, 0x23	; 35
    1440:	80 93 f9 01 	sts	0x01F9, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 fa 01 	sts	0x01FA, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    144a:	42 e0       	ldi	r20, 0x02	; 2
    144c:	69 ef       	ldi	r22, 0xF9	; 249
    144e:	71 e0       	ldi	r23, 0x01	; 1
    1450:	82 e2       	ldi	r24, 0x22	; 34
    1452:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1456:	0e 94 3b 09 	call	0x1276	; 0x1276 <twi_busy>
    145a:	81 11       	cpse	r24, r1
    145c:	fc cf       	rjmp	.-8      	; 0x1456 <fm_rsq_status+0x18>
    145e:	8f ea       	ldi	r24, 0xAF	; 175
    1460:	94 e0       	ldi	r25, 0x04	; 4
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <fm_rsq_status+0x24>
    1466:	00 c0       	rjmp	.+0      	; 0x1468 <fm_rsq_status+0x2a>
    1468:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    146a:	48 e0       	ldi	r20, 0x08	; 8
    146c:	62 e0       	ldi	r22, 0x02	; 2
    146e:	72 e0       	ldi	r23, 0x02	; 2
    1470:	82 e2       	ldi	r24, 0x22	; 34
    1472:	0e 94 50 09 	call	0x12a0	; 0x12a0 <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1476:	0e 94 3b 09 	call	0x1276	; 0x1276 <twi_busy>
    147a:	81 11       	cpse	r24, r1
    147c:	fc cf       	rjmp	.-8      	; 0x1476 <fm_rsq_status+0x38>
}
    147e:	08 95       	ret

00001480 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    1480:	82 e2       	ldi	r24, 0x22	; 34
    1482:	80 93 f9 01 	sts	0x01F9, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 fa 01 	sts	0x01FA, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    148c:	42 e0       	ldi	r20, 0x02	; 2
    148e:	69 ef       	ldi	r22, 0xF9	; 249
    1490:	71 e0       	ldi	r23, 0x01	; 1
    1492:	82 e2       	ldi	r24, 0x22	; 34
    1494:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1498:	0e 94 3b 09 	call	0x1276	; 0x1276 <twi_busy>
    149c:	81 11       	cpse	r24, r1
    149e:	fc cf       	rjmp	.-8      	; 0x1498 <fm_tune_status+0x18>
    14a0:	8f ea       	ldi	r24, 0xAF	; 175
    14a2:	94 e0       	ldi	r25, 0x04	; 4
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <fm_tune_status+0x24>
    14a8:	00 c0       	rjmp	.+0      	; 0x14aa <fm_tune_status+0x2a>
    14aa:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    14ac:	48 e0       	ldi	r20, 0x08	; 8
    14ae:	62 e0       	ldi	r22, 0x02	; 2
    14b0:	72 e0       	ldi	r23, 0x02	; 2
    14b2:	82 e2       	ldi	r24, 0x22	; 34
    14b4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    14b8:	0e 94 3b 09 	call	0x1276	; 0x1276 <twi_busy>
    14bc:	81 11       	cpse	r24, r1
    14be:	fc cf       	rjmp	.-8      	; 0x14b8 <fm_tune_status+0x38>
}
    14c0:	08 95       	ret

000014c2 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    14c2:	82 e4       	ldi	r24, 0x42	; 66
    14c4:	80 93 f9 01 	sts	0x01F9, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 fa 01 	sts	0x01FA, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    14ce:	42 e0       	ldi	r20, 0x02	; 2
    14d0:	69 ef       	ldi	r22, 0xF9	; 249
    14d2:	71 e0       	ldi	r23, 0x01	; 1
    14d4:	82 e2       	ldi	r24, 0x22	; 34
    14d6:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    14da:	0e 94 3b 09 	call	0x1276	; 0x1276 <twi_busy>
    14de:	81 11       	cpse	r24, r1
    14e0:	fc cf       	rjmp	.-8      	; 0x14da <am_tune_status+0x18>
    14e2:	8f ea       	ldi	r24, 0xAF	; 175
    14e4:	94 e0       	ldi	r25, 0x04	; 4
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <am_tune_status+0x24>
    14ea:	00 c0       	rjmp	.+0      	; 0x14ec <am_tune_status+0x2a>
    14ec:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    14ee:	48 e0       	ldi	r20, 0x08	; 8
    14f0:	62 e0       	ldi	r22, 0x02	; 2
    14f2:	72 e0       	ldi	r23, 0x02	; 2
    14f4:	82 e2       	ldi	r24, 0x22	; 34
    14f6:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <twi_start_rd>

000014fa <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    14fa:	83 e4       	ldi	r24, 0x43	; 67
    14fc:	80 93 f9 01 	sts	0x01F9, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 fa 01 	sts	0x01FA, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1506:	42 e0       	ldi	r20, 0x02	; 2
    1508:	69 ef       	ldi	r22, 0xF9	; 249
    150a:	71 e0       	ldi	r23, 0x01	; 1
    150c:	82 e2       	ldi	r24, 0x22	; 34
    150e:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1512:	0e 94 3b 09 	call	0x1276	; 0x1276 <twi_busy>
    1516:	81 11       	cpse	r24, r1
    1518:	fc cf       	rjmp	.-8      	; 0x1512 <am_rsq_status+0x18>
    151a:	8f ea       	ldi	r24, 0xAF	; 175
    151c:	94 e0       	ldi	r25, 0x04	; 4
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <am_rsq_status+0x24>
    1522:	00 c0       	rjmp	.+0      	; 0x1524 <am_rsq_status+0x2a>
    1524:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1526:	48 e0       	ldi	r20, 0x08	; 8
    1528:	62 e0       	ldi	r22, 0x02	; 2
    152a:	72 e0       	ldi	r23, 0x02	; 2
    152c:	82 e2       	ldi	r24, 0x22	; 34
    152e:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <twi_start_rd>

00001532 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1532:	e9 ef       	ldi	r30, 0xF9	; 249
    1534:	f1 e0       	ldi	r31, 0x01	; 1
    1536:	22 e1       	ldi	r18, 0x12	; 18
    1538:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    153a:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    153c:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    153e:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1540:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1542:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1544:	46 e0       	ldi	r20, 0x06	; 6
    1546:	bf 01       	movw	r22, r30
    1548:	82 e2       	ldi	r24, 0x22	; 34
    154a:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    154e:	8f e3       	ldi	r24, 0x3F	; 63
    1550:	9c e9       	ldi	r25, 0x9C	; 156
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <set_property+0x20>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <set_property+0x26>
    1558:	00 00       	nop
    155a:	08 95       	ret

0000155c <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
    155c:	81 e9       	ldi	r24, 0x91	; 145
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <eeprom_read_word>
    1564:	90 93 ab 01 	sts	0x01AB, r25
    1568:	80 93 aa 01 	sts	0x01AA, r24
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    156c:	80 e9       	ldi	r24, 0x90	; 144
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	0e 94 77 0f 	call	0x1eee	; 0x1eee <eeprom_read_byte>
    1574:	80 93 a7 01 	sts	0x01A7, r24

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    1578:	e9 ef       	ldi	r30, 0xF9	; 249
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    1580:	80 e5       	ldi	r24, 0x50	; 80
    1582:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1588:	43 e0       	ldi	r20, 0x03	; 3
    158a:	bf 01       	movw	r22, r30
    158c:	82 e2       	ldi	r24, 0x22	; 34
    158e:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	8b ed       	ldi	r24, 0xDB	; 219
    1596:	95 e0       	ldi	r25, 0x05	; 5
    1598:	21 50       	subi	r18, 0x01	; 1
    159a:	80 40       	sbci	r24, 0x00	; 0
    159c:	90 40       	sbci	r25, 0x00	; 0
    159e:	e1 f7       	brne	.-8      	; 0x1598 <fm_pwr_up+0x3c>
    15a0:	00 c0       	rjmp	.+0      	; 0x15a2 <fm_pwr_up+0x46>
    15a2:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_property>

000015b0 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    15b0:	85 ea       	ldi	r24, 0xA5	; 165
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <eeprom_read_word>
    15b8:	90 93 a9 01 	sts	0x01A9, r25
    15bc:	80 93 a8 01 	sts	0x01A8, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    15c0:	80 e9       	ldi	r24, 0x90	; 144
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <eeprom_read_byte>
    15c8:	80 93 a7 01 	sts	0x01A7, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    15cc:	e9 ef       	ldi	r30, 0xF9	; 249
    15ce:	f1 e0       	ldi	r31, 0x01	; 1
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    15d4:	81 e5       	ldi	r24, 0x51	; 81
    15d6:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    15d8:	85 e0       	ldi	r24, 0x05	; 5
    15da:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    15dc:	43 e0       	ldi	r20, 0x03	; 3
    15de:	bf 01       	movw	r22, r30
    15e0:	82 e2       	ldi	r24, 0x22	; 34
    15e2:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    15e6:	2f ef       	ldi	r18, 0xFF	; 255
    15e8:	8b ed       	ldi	r24, 0xDB	; 219
    15ea:	95 e0       	ldi	r25, 0x05	; 5
    15ec:	21 50       	subi	r18, 0x01	; 1
    15ee:	80 40       	sbci	r24, 0x00	; 0
    15f0:	90 40       	sbci	r25, 0x00	; 0
    15f2:	e1 f7       	brne	.-8      	; 0x15ec <am_pwr_up+0x3c>
    15f4:	00 c0       	rjmp	.+0      	; 0x15f6 <am_pwr_up+0x46>
    15f6:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_property>

00001604 <sw_pwr_up>:
    1604:	8e eb       	ldi	r24, 0xBE	; 190
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <eeprom_read_word>
    160c:	90 93 bd 01 	sts	0x01BD, r25
    1610:	80 93 bc 01 	sts	0x01BC, r24
    1614:	80 e9       	ldi	r24, 0x90	; 144
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	0e 94 77 0f 	call	0x1eee	; 0x1eee <eeprom_read_byte>
    161c:	80 93 a7 01 	sts	0x01A7, r24
    1620:	e9 ef       	ldi	r30, 0xF9	; 249
    1622:	f1 e0       	ldi	r31, 0x01	; 1
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
    1628:	81 e5       	ldi	r24, 0x51	; 81
    162a:	81 83       	std	Z+1, r24	; 0x01
    162c:	85 e0       	ldi	r24, 0x05	; 5
    162e:	82 83       	std	Z+2, r24	; 0x02
    1630:	43 e0       	ldi	r20, 0x03	; 3
    1632:	bf 01       	movw	r22, r30
    1634:	82 e2       	ldi	r24, 0x22	; 34
    1636:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    163a:	2f ef       	ldi	r18, 0xFF	; 255
    163c:	8b ed       	ldi	r24, 0xDB	; 219
    163e:	95 e0       	ldi	r25, 0x05	; 5
    1640:	21 50       	subi	r18, 0x01	; 1
    1642:	80 40       	sbci	r24, 0x00	; 0
    1644:	90 40       	sbci	r25, 0x00	; 0
    1646:	e1 f7       	brne	.-8      	; 0x1640 <sw_pwr_up+0x3c>
    1648:	00 c0       	rjmp	.+0      	; 0x164a <sw_pwr_up+0x46>
    164a:	00 00       	nop
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	93 e3       	ldi	r25, 0x33	; 51
    1654:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_property>
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	71 e0       	ldi	r23, 0x01	; 1
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	91 e3       	ldi	r25, 0x31	; 49
    1660:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_property>
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_property>

00001670 <main>:
//******************************************************************************/
//                                main                                 
//******************************************************************************/
int main(){     
	DDRB |= 0xF0; //bits 4-7 outputs
    1670:	87 b3       	in	r24, 0x17	; 23
    1672:	80 6f       	ori	r24, 0xF0	; 240
    1674:	87 bb       	out	0x17, r24	; 23
	DDRE = 0x40;  //set bit 6 to output
    1676:	80 e4       	ldi	r24, 0x40	; 64
    1678:	82 b9       	out	0x02, r24	; 2
//Initalizes timer/counter2 (TCNT2). TCNT2 is running in normal mode and enables
//the ISR on overflow. It has a prescale of 128 and is enable in fast PWM mode. 
//It sets the OC2 bit on compare. This timer/counter is responsible 
//******************************************************************************/
void tcnt2_init(void){
	TIMSK  |=  (1 << TOIE2); //enable TCNT2 overflow interrupt
    167a:	87 b7       	in	r24, 0x37	; 55
    167c:	80 64       	ori	r24, 0x40	; 64
    167e:	87 bf       	out	0x37, r24	; 55

	//Normal mode, 128 pre-scale, Set OC2 on compare, clear OC2 at BOTTOM
	TCCR2 |= (1 << CS21)|(1 << CS20)|(1 << COM21)|(1 << COM20);
    1680:	85 b5       	in	r24, 0x25	; 37
    1682:	83 63       	ori	r24, 0x33	; 51
    1684:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << WGM21)|(1 << WGM20);
    1686:	85 b5       	in	r24, 0x25	; 37
    1688:	88 64       	ori	r24, 0x48	; 72
    168a:	85 bd       	out	0x25, r24	; 37
//external 32khz crystal.  Runs in normal mode with a 128 prescale.  Interrupt
//occurs at overflow 0xFF. This interrupt is responsible for handling the clock
//time. 
//******************************************************************************/
void tcnt0_init(void){
	TIMSK |= (1 << TOIE0); //enable TCNT0 overflow interrupt
    168c:	87 b7       	in	r24, 0x37	; 55
    168e:	81 60       	ori	r24, 0x01	; 1
    1690:	87 bf       	out	0x37, r24	; 55

	//Normal mode, 128 prescale, clock from 32kHz crystal
	TCCR0 |= (1 << CS02) | (1 << CS00); 
    1692:	83 b7       	in	r24, 0x33	; 51
    1694:	85 60       	ori	r24, 0x05	; 5
    1696:	83 bf       	out	0x33, r24	; 51
	ASSR  |= (1 << AS0); 
    1698:	80 b7       	in	r24, 0x30	; 48
    169a:	88 60       	ori	r24, 0x08	; 8
    169c:	80 bf       	out	0x30, r24	; 48
//prescale of 64. It is responsible for sending a PWM signal to the volume 
//on the audio amplifier board. This timer/counter does not have and ISR and 
//the value in OC3RA is adjusted with the left encoder. 
//******************************************************************************/
void tcnt3_init(void) {
	TCCR3A |= (1 << COM3A1)|(1 << WGM30); //clear on compare match
    169e:	80 91 8b 00 	lds	r24, 0x008B
    16a2:	81 68       	ori	r24, 0x81	; 129
    16a4:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B |= (1 << WGM32)|(1 << CS31);
    16a8:	80 91 8a 00 	lds	r24, 0x008A
    16ac:	8a 60       	ori	r24, 0x0A	; 10
    16ae:	80 93 8a 00 	sts	0x008A, r24
	DDRE |= (1 << PE3); //enable output pin
    16b2:	13 9a       	sbi	0x02, 3	; 2
	OCR3A = 0x7F;
    16b4:	8f e7       	ldi	r24, 0x7F	; 127
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	90 93 87 00 	sts	0x0087, r25
    16bc:	80 93 86 00 	sts	0x0086, r24
//device specific initalizations.  Sets up SPI to be:
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
//******************************************************************************/
void spi_init(void){
	DDRB  |= 0x07;   //Turn on SS, MOSI, SCLK
    16c0:	87 b3       	in	r24, 0x17	; 23
    16c2:	87 60       	ori	r24, 0x07	; 7
    16c4:	87 bb       	out	0x17, r24	; 23
	SPCR  |= (1 << SPE) | (1 << MSTR);  //enable SPI, master mode 
    16c6:	8d b1       	in	r24, 0x0d	; 13
    16c8:	80 65       	ori	r24, 0x50	; 80
    16ca:	8d b9       	out	0x0d, r24	; 13
	SPSR  |= (1 << SPI2X); // double speed operation
    16cc:	70 9a       	sbi	0x0e, 0	; 14
//internal 16MHz clock and willtrigger an ISR when the counter reaches the value 
//of the OCR1A register. The OCRIA value is chosen in order to generate a 
//desired frequency that will be the output sound of the alarm.
//******************************************************************************/
void tcnt1_init(void) {
	OCR1A = 0x009C; //initialize to 156
    16ce:	8c e9       	ldi	r24, 0x9C	; 156
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9b bd       	out	0x2b, r25	; 43
    16d4:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A); //enable TCNT1 output compare interrupt enable bit
    16d6:	87 b7       	in	r24, 0x37	; 55
    16d8:	80 61       	ori	r24, 0x10	; 16
    16da:	87 bf       	out	0x37, r24	; 55

	//CTC mode with a prescale of 64
	TCCR1B |= (1 << CS11)|(1 << CS10)|(1 << WGM12);
    16dc:	8e b5       	in	r24, 0x2e	; 46
    16de:	8b 60       	ori	r24, 0x0B	; 11
    16e0:	8e bd       	out	0x2e, r24	; 46
//ADC, sets a prescale, and then sets the interrupt enable. Only after these
//conditions can the ADC begin its conversion.
//******************************************************************************/
void adc_init() {
	//Vcc internal to Atmega128, ADC PIN 6 (PORTF)
	ADMUX |= (1 << REFS0)|(1 << MUX2)|(1 << MUX0);
    16e2:	87 b1       	in	r24, 0x07	; 7
    16e4:	85 64       	ori	r24, 0x45	; 69
    16e6:	87 b9       	out	0x07, r24	; 7

	//Enable ADC, prescale, ADC interrupt enable
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0)|(1 << ADIE);
    16e8:	86 b1       	in	r24, 0x06	; 6
    16ea:	8f 68       	ori	r24, 0x8F	; 143
    16ec:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC); //Start conversion
    16ee:	36 9a       	sbi	0x06, 6	; 6
	tcnt0_init();
	tcnt3_init();
	spi_init();  
	tcnt1_init();
	adc_init();  
	lcd_init(); 
    16f0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <lcd_init>
	init_twi();	
    16f4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <init_twi>
	radio_init();
    16f8:	0e 94 2d 03 	call	0x65a	; 0x65a <radio_init>

	//enable interrupts
	sei();
    16fc:	78 94       	sei

	//Fire up the radio
	fm_pwr_up();
    16fe:	0e 94 ae 0a 	call	0x155c	; 0x155c <fm_pwr_up>
	current_fm_freq = encoder_freq;
    1702:	80 91 12 01 	lds	r24, 0x0112
    1706:	90 91 13 01 	lds	r25, 0x0113
    170a:	90 93 ab 01 	sts	0x01AB, r25
    170e:	80 93 aa 01 	sts	0x01AA, r24
	fm_tune_freq();
    1712:	0e 94 8a 09 	call	0x1314	; 0x1314 <fm_tune_freq>

	twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1);
    1716:	41 e0       	ldi	r20, 0x01	; 1
    1718:	60 ef       	ldi	r22, 0xF0	; 240
    171a:	71 e0       	ldi	r23, 0x01	; 1
    171c:	80 e9       	ldi	r24, 0x90	; 144
    171e:	0e 94 3f 09 	call	0x127e	; 0x127e <twi_start_wr>
    1722:	45 e9       	ldi	r20, 0x95	; 149
    1724:	e4 2e       	mov	r14, r20
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	f4 2e       	mov	r15, r20
	while(1){
		lm73_temp = lm73_rd_buf[0];   //Read in 16-bit temperature data
		lm73_temp = (lm73_temp << 8); 
		lm73_temp |= lm73_rd_buf[1];
		disp_temp = (lm73_temp/128);  //convert to celcius value to be displayed
		sprintf(temperature, "IN:%dC\xDFOUT: :[", disp_temp);
    172a:	06 e5       	ldi	r16, 0x56	; 86
    172c:	11 e0       	ldi	r17, 0x01	; 1
    172e:	e7 01       	movw	r28, r14
		end_of_string = strlen(temperature); 

		
    //Place spaces in empty index
		for (uint8_t i = end_of_string; i < 16; i++)
			temperature[i] = ' ';
    1730:	50 e2       	ldi	r21, 0x20	; 32
    1732:	d5 2e       	mov	r13, r21

	twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1);
	//radio_pwr_dwn();

	while(1){
		lm73_temp = lm73_rd_buf[0];   //Read in 16-bit temperature data
    1734:	80 91 f2 01 	lds	r24, 0x01F2
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	90 93 94 01 	sts	0x0194, r25
    173e:	80 93 93 01 	sts	0x0193, r24
		lm73_temp = (lm73_temp << 8); 
    1742:	80 91 93 01 	lds	r24, 0x0193
    1746:	90 91 94 01 	lds	r25, 0x0194
    174a:	98 2f       	mov	r25, r24
    174c:	88 27       	eor	r24, r24
    174e:	90 93 94 01 	sts	0x0194, r25
    1752:	80 93 93 01 	sts	0x0193, r24
		lm73_temp |= lm73_rd_buf[1];
    1756:	80 91 93 01 	lds	r24, 0x0193
    175a:	90 91 94 01 	lds	r25, 0x0194
    175e:	20 91 f3 01 	lds	r18, 0x01F3
    1762:	82 2b       	or	r24, r18
    1764:	90 93 94 01 	sts	0x0194, r25
    1768:	80 93 93 01 	sts	0x0193, r24
		disp_temp = (lm73_temp/128);  //convert to celcius value to be displayed
    176c:	80 91 93 01 	lds	r24, 0x0193
    1770:	90 91 94 01 	lds	r25, 0x0194
    1774:	88 0f       	add	r24, r24
    1776:	89 2f       	mov	r24, r25
    1778:	88 1f       	adc	r24, r24
    177a:	99 0b       	sbc	r25, r25
    177c:	91 95       	neg	r25
    177e:	90 93 6b 01 	sts	0x016B, r25
    1782:	80 93 6a 01 	sts	0x016A, r24
		sprintf(temperature, "IN:%dC\xDFOUT: :[", disp_temp);
    1786:	80 91 6a 01 	lds	r24, 0x016A
    178a:	90 91 6b 01 	lds	r25, 0x016B
    178e:	9f 93       	push	r25
    1790:	8f 93       	push	r24
    1792:	1f 93       	push	r17
    1794:	0f 93       	push	r16
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <sprintf>
		end_of_string = strlen(temperature); 
    179e:	f7 01       	movw	r30, r14
    17a0:	01 90       	ld	r0, Z+
    17a2:	00 20       	and	r0, r0
    17a4:	e9 f7       	brne	.-6      	; 0x17a0 <main+0x130>
    17a6:	31 97       	sbiw	r30, 0x01	; 1
    17a8:	e5 59       	subi	r30, 0x95	; 149
    17aa:	f1 40       	sbci	r31, 0x01	; 1
    17ac:	e0 93 6e 01 	sts	0x016E, r30

		
    //Place spaces in empty index
		for (uint8_t i = end_of_string; i < 16; i++)
    17b0:	80 91 6e 01 	lds	r24, 0x016E
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	80 31       	cpi	r24, 0x10	; 16
    17c2:	40 f4       	brcc	.+16     	; 0x17d4 <main+0x164>
			temperature[i] = ' ';
    17c4:	e8 2f       	mov	r30, r24
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	eb 56       	subi	r30, 0x6B	; 107
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
    17cc:	d0 82       	st	Z, r13
		sprintf(temperature, "IN:%dC\xDFOUT: :[", disp_temp);
		end_of_string = strlen(temperature); 

		
    //Place spaces in empty index
		for (uint8_t i = end_of_string; i < 16; i++)
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	80 31       	cpi	r24, 0x10	; 16
    17d2:	c1 f7       	brne	.-16     	; 0x17c4 <main+0x154>
			temperature[i] = ' ';

		if (clock_mode == RADIO_MODE) {
    17d4:	80 91 70 01 	lds	r24, 0x0170
    17d8:	90 91 71 01 	lds	r25, 0x0171
    17dc:	03 97       	sbiw	r24, 0x03	; 3
    17de:	51 f0       	breq	.+20     	; 0x17f4 <main+0x184>
			fm_pwr_up();
			current_fm_freq = encoder_freq;
			fm_tune_freq();
			_delay_ms(100);
		}
		if (clock_mode != RADIO_MODE) {radio_pwr_dwn();}
    17e0:	80 91 70 01 	lds	r24, 0x0170
    17e4:	90 91 71 01 	lds	r25, 0x0171
    17e8:	03 97       	sbiw	r24, 0x03	; 3
    17ea:	09 f4       	brne	.+2      	; 0x17ee <main+0x17e>
    17ec:	a3 cf       	rjmp	.-186    	; 0x1734 <main+0xc4>
    17ee:	0e 94 e5 09 	call	0x13ca	; 0x13ca <radio_pwr_dwn>
    17f2:	a0 cf       	rjmp	.-192    	; 0x1734 <main+0xc4>
    //Place spaces in empty index
		for (uint8_t i = end_of_string; i < 16; i++)
			temperature[i] = ' ';

		if (clock_mode == RADIO_MODE) {
			fm_pwr_up();
    17f4:	0e 94 ae 0a 	call	0x155c	; 0x155c <fm_pwr_up>
			current_fm_freq = encoder_freq;
    17f8:	80 91 12 01 	lds	r24, 0x0112
    17fc:	90 91 13 01 	lds	r25, 0x0113
    1800:	90 93 ab 01 	sts	0x01AB, r25
    1804:	80 93 aa 01 	sts	0x01AA, r24
			fm_tune_freq();
    1808:	0e 94 8a 09 	call	0x1314	; 0x1314 <fm_tune_freq>
    180c:	9f ef       	ldi	r25, 0xFF	; 255
    180e:	21 ee       	ldi	r18, 0xE1	; 225
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	91 50       	subi	r25, 0x01	; 1
    1814:	20 40       	sbci	r18, 0x00	; 0
    1816:	80 40       	sbci	r24, 0x00	; 0
    1818:	e1 f7       	brne	.-8      	; 0x1812 <main+0x1a2>
    181a:	00 c0       	rjmp	.+0      	; 0x181c <main+0x1ac>
    181c:	00 00       	nop
    181e:	e0 cf       	rjmp	.-64     	; 0x17e0 <main+0x170>

00001820 <__divmodhi4>:
    1820:	97 fb       	bst	r25, 7
    1822:	07 2e       	mov	r0, r23
    1824:	16 f4       	brtc	.+4      	; 0x182a <__divmodhi4+0xa>
    1826:	00 94       	com	r0
    1828:	07 d0       	rcall	.+14     	; 0x1838 <__divmodhi4_neg1>
    182a:	77 fd       	sbrc	r23, 7
    182c:	09 d0       	rcall	.+18     	; 0x1840 <__divmodhi4_neg2>
    182e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__udivmodhi4>
    1832:	07 fc       	sbrc	r0, 7
    1834:	05 d0       	rcall	.+10     	; 0x1840 <__divmodhi4_neg2>
    1836:	3e f4       	brtc	.+14     	; 0x1846 <__divmodhi4_exit>

00001838 <__divmodhi4_neg1>:
    1838:	90 95       	com	r25
    183a:	81 95       	neg	r24
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	08 95       	ret

00001840 <__divmodhi4_neg2>:
    1840:	70 95       	com	r23
    1842:	61 95       	neg	r22
    1844:	7f 4f       	sbci	r23, 0xFF	; 255

00001846 <__divmodhi4_exit>:
    1846:	08 95       	ret

00001848 <__divmodsi4>:
    1848:	05 2e       	mov	r0, r21
    184a:	97 fb       	bst	r25, 7
    184c:	1e f4       	brtc	.+6      	; 0x1854 <__divmodsi4+0xc>
    184e:	00 94       	com	r0
    1850:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__negsi2>
    1854:	57 fd       	sbrc	r21, 7
    1856:	07 d0       	rcall	.+14     	; 0x1866 <__divmodsi4_neg2>
    1858:	0e 94 6f 0c 	call	0x18de	; 0x18de <__udivmodsi4>
    185c:	07 fc       	sbrc	r0, 7
    185e:	03 d0       	rcall	.+6      	; 0x1866 <__divmodsi4_neg2>
    1860:	4e f4       	brtc	.+18     	; 0x1874 <__divmodsi4_exit>
    1862:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__negsi2>

00001866 <__divmodsi4_neg2>:
    1866:	50 95       	com	r21
    1868:	40 95       	com	r20
    186a:	30 95       	com	r19
    186c:	21 95       	neg	r18
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	4f 4f       	sbci	r20, 0xFF	; 255
    1872:	5f 4f       	sbci	r21, 0xFF	; 255

00001874 <__divmodsi4_exit>:
    1874:	08 95       	ret

00001876 <__negsi2>:
    1876:	90 95       	com	r25
    1878:	80 95       	com	r24
    187a:	70 95       	com	r23
    187c:	61 95       	neg	r22
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	8f 4f       	sbci	r24, 0xFF	; 255
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	08 95       	ret

00001886 <__tablejump2__>:
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	00 24       	eor	r0, r0
    188c:	00 1c       	adc	r0, r0
    188e:	0b be       	out	0x3b, r0	; 59
    1890:	07 90       	elpm	r0, Z+
    1892:	f6 91       	elpm	r31, Z
    1894:	e0 2d       	mov	r30, r0
    1896:	09 94       	ijmp

00001898 <__umulhisi3>:
    1898:	a2 9f       	mul	r26, r18
    189a:	b0 01       	movw	r22, r0
    189c:	b3 9f       	mul	r27, r19
    189e:	c0 01       	movw	r24, r0
    18a0:	a3 9f       	mul	r26, r19
    18a2:	70 0d       	add	r23, r0
    18a4:	81 1d       	adc	r24, r1
    18a6:	11 24       	eor	r1, r1
    18a8:	91 1d       	adc	r25, r1
    18aa:	b2 9f       	mul	r27, r18
    18ac:	70 0d       	add	r23, r0
    18ae:	81 1d       	adc	r24, r1
    18b0:	11 24       	eor	r1, r1
    18b2:	91 1d       	adc	r25, r1
    18b4:	08 95       	ret

000018b6 <__udivmodhi4>:
    18b6:	aa 1b       	sub	r26, r26
    18b8:	bb 1b       	sub	r27, r27
    18ba:	51 e1       	ldi	r21, 0x11	; 17
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <__udivmodhi4_ep>

000018be <__udivmodhi4_loop>:
    18be:	aa 1f       	adc	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	a6 17       	cp	r26, r22
    18c4:	b7 07       	cpc	r27, r23
    18c6:	10 f0       	brcs	.+4      	; 0x18cc <__udivmodhi4_ep>
    18c8:	a6 1b       	sub	r26, r22
    18ca:	b7 0b       	sbc	r27, r23

000018cc <__udivmodhi4_ep>:
    18cc:	88 1f       	adc	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	5a 95       	dec	r21
    18d2:	a9 f7       	brne	.-22     	; 0x18be <__udivmodhi4_loop>
    18d4:	80 95       	com	r24
    18d6:	90 95       	com	r25
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	08 95       	ret

000018de <__udivmodsi4>:
    18de:	a1 e2       	ldi	r26, 0x21	; 33
    18e0:	1a 2e       	mov	r1, r26
    18e2:	aa 1b       	sub	r26, r26
    18e4:	bb 1b       	sub	r27, r27
    18e6:	fd 01       	movw	r30, r26
    18e8:	0d c0       	rjmp	.+26     	; 0x1904 <__udivmodsi4_ep>

000018ea <__udivmodsi4_loop>:
    18ea:	aa 1f       	adc	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	ee 1f       	adc	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	a2 17       	cp	r26, r18
    18f4:	b3 07       	cpc	r27, r19
    18f6:	e4 07       	cpc	r30, r20
    18f8:	f5 07       	cpc	r31, r21
    18fa:	20 f0       	brcs	.+8      	; 0x1904 <__udivmodsi4_ep>
    18fc:	a2 1b       	sub	r26, r18
    18fe:	b3 0b       	sbc	r27, r19
    1900:	e4 0b       	sbc	r30, r20
    1902:	f5 0b       	sbc	r31, r21

00001904 <__udivmodsi4_ep>:
    1904:	66 1f       	adc	r22, r22
    1906:	77 1f       	adc	r23, r23
    1908:	88 1f       	adc	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	1a 94       	dec	r1
    190e:	69 f7       	brne	.-38     	; 0x18ea <__udivmodsi4_loop>
    1910:	60 95       	com	r22
    1912:	70 95       	com	r23
    1914:	80 95       	com	r24
    1916:	90 95       	com	r25
    1918:	9b 01       	movw	r18, r22
    191a:	ac 01       	movw	r20, r24
    191c:	bd 01       	movw	r22, r26
    191e:	cf 01       	movw	r24, r30
    1920:	08 95       	ret

00001922 <strncpy>:
    1922:	fb 01       	movw	r30, r22
    1924:	dc 01       	movw	r26, r24
    1926:	41 50       	subi	r20, 0x01	; 1
    1928:	50 40       	sbci	r21, 0x00	; 0
    192a:	48 f0       	brcs	.+18     	; 0x193e <strncpy+0x1c>
    192c:	01 90       	ld	r0, Z+
    192e:	0d 92       	st	X+, r0
    1930:	00 20       	and	r0, r0
    1932:	c9 f7       	brne	.-14     	; 0x1926 <strncpy+0x4>
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <strncpy+0x16>
    1936:	1d 92       	st	X+, r1
    1938:	41 50       	subi	r20, 0x01	; 1
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	e0 f7       	brcc	.-8      	; 0x1936 <strncpy+0x14>
    193e:	08 95       	ret

00001940 <sprintf>:
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	2e 97       	sbiw	r28, 0x0e	; 14
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	0d 89       	ldd	r16, Y+21	; 0x15
    195a:	1e 89       	ldd	r17, Y+22	; 0x16
    195c:	86 e0       	ldi	r24, 0x06	; 6
    195e:	8c 83       	std	Y+4, r24	; 0x04
    1960:	1a 83       	std	Y+2, r17	; 0x02
    1962:	09 83       	std	Y+1, r16	; 0x01
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	9f e7       	ldi	r25, 0x7F	; 127
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	ae 01       	movw	r20, r28
    196e:	47 5e       	subi	r20, 0xE7	; 231
    1970:	5f 4f       	sbci	r21, 0xFF	; 255
    1972:	6f 89       	ldd	r22, Y+23	; 0x17
    1974:	78 8d       	ldd	r23, Y+24	; 0x18
    1976:	ce 01       	movw	r24, r28
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <vfprintf>
    197e:	2f 81       	ldd	r18, Y+7	; 0x07
    1980:	38 85       	ldd	r19, Y+8	; 0x08
    1982:	f8 01       	movw	r30, r16
    1984:	e2 0f       	add	r30, r18
    1986:	f3 1f       	adc	r31, r19
    1988:	10 82       	st	Z, r1
    198a:	2e 96       	adiw	r28, 0x0e	; 14
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	08 95       	ret

000019a0 <vfprintf>:
    19a0:	2f 92       	push	r2
    19a2:	3f 92       	push	r3
    19a4:	4f 92       	push	r4
    19a6:	5f 92       	push	r5
    19a8:	6f 92       	push	r6
    19aa:	7f 92       	push	r7
    19ac:	8f 92       	push	r8
    19ae:	9f 92       	push	r9
    19b0:	af 92       	push	r10
    19b2:	bf 92       	push	r11
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	2c 97       	sbiw	r28, 0x0c	; 12
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	7c 01       	movw	r14, r24
    19d6:	6b 01       	movw	r12, r22
    19d8:	8a 01       	movw	r16, r20
    19da:	fc 01       	movw	r30, r24
    19dc:	17 82       	std	Z+7, r1	; 0x07
    19de:	16 82       	std	Z+6, r1	; 0x06
    19e0:	83 81       	ldd	r24, Z+3	; 0x03
    19e2:	81 ff       	sbrs	r24, 1
    19e4:	bd c1       	rjmp	.+890    	; 0x1d60 <vfprintf+0x3c0>
    19e6:	ce 01       	movw	r24, r28
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	4c 01       	movw	r8, r24
    19ec:	f7 01       	movw	r30, r14
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	f6 01       	movw	r30, r12
    19f2:	93 fd       	sbrc	r25, 3
    19f4:	85 91       	lpm	r24, Z+
    19f6:	93 ff       	sbrs	r25, 3
    19f8:	81 91       	ld	r24, Z+
    19fa:	6f 01       	movw	r12, r30
    19fc:	88 23       	and	r24, r24
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <vfprintf+0x62>
    1a00:	ab c1       	rjmp	.+854    	; 0x1d58 <vfprintf+0x3b8>
    1a02:	85 32       	cpi	r24, 0x25	; 37
    1a04:	39 f4       	brne	.+14     	; 0x1a14 <vfprintf+0x74>
    1a06:	93 fd       	sbrc	r25, 3
    1a08:	85 91       	lpm	r24, Z+
    1a0a:	93 ff       	sbrs	r25, 3
    1a0c:	81 91       	ld	r24, Z+
    1a0e:	6f 01       	movw	r12, r30
    1a10:	85 32       	cpi	r24, 0x25	; 37
    1a12:	29 f4       	brne	.+10     	; 0x1a1e <vfprintf+0x7e>
    1a14:	b7 01       	movw	r22, r14
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1a1c:	e7 cf       	rjmp	.-50     	; 0x19ec <vfprintf+0x4c>
    1a1e:	51 2c       	mov	r5, r1
    1a20:	31 2c       	mov	r3, r1
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	20 32       	cpi	r18, 0x20	; 32
    1a26:	a0 f4       	brcc	.+40     	; 0x1a50 <vfprintf+0xb0>
    1a28:	8b 32       	cpi	r24, 0x2B	; 43
    1a2a:	69 f0       	breq	.+26     	; 0x1a46 <vfprintf+0xa6>
    1a2c:	30 f4       	brcc	.+12     	; 0x1a3a <vfprintf+0x9a>
    1a2e:	80 32       	cpi	r24, 0x20	; 32
    1a30:	59 f0       	breq	.+22     	; 0x1a48 <vfprintf+0xa8>
    1a32:	83 32       	cpi	r24, 0x23	; 35
    1a34:	69 f4       	brne	.+26     	; 0x1a50 <vfprintf+0xb0>
    1a36:	20 61       	ori	r18, 0x10	; 16
    1a38:	2c c0       	rjmp	.+88     	; 0x1a92 <vfprintf+0xf2>
    1a3a:	8d 32       	cpi	r24, 0x2D	; 45
    1a3c:	39 f0       	breq	.+14     	; 0x1a4c <vfprintf+0xac>
    1a3e:	80 33       	cpi	r24, 0x30	; 48
    1a40:	39 f4       	brne	.+14     	; 0x1a50 <vfprintf+0xb0>
    1a42:	21 60       	ori	r18, 0x01	; 1
    1a44:	26 c0       	rjmp	.+76     	; 0x1a92 <vfprintf+0xf2>
    1a46:	22 60       	ori	r18, 0x02	; 2
    1a48:	24 60       	ori	r18, 0x04	; 4
    1a4a:	23 c0       	rjmp	.+70     	; 0x1a92 <vfprintf+0xf2>
    1a4c:	28 60       	ori	r18, 0x08	; 8
    1a4e:	21 c0       	rjmp	.+66     	; 0x1a92 <vfprintf+0xf2>
    1a50:	27 fd       	sbrc	r18, 7
    1a52:	27 c0       	rjmp	.+78     	; 0x1aa2 <vfprintf+0x102>
    1a54:	30 ed       	ldi	r19, 0xD0	; 208
    1a56:	38 0f       	add	r19, r24
    1a58:	3a 30       	cpi	r19, 0x0A	; 10
    1a5a:	78 f4       	brcc	.+30     	; 0x1a7a <vfprintf+0xda>
    1a5c:	26 ff       	sbrs	r18, 6
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <vfprintf+0xcc>
    1a60:	fa e0       	ldi	r31, 0x0A	; 10
    1a62:	5f 9e       	mul	r5, r31
    1a64:	30 0d       	add	r19, r0
    1a66:	11 24       	eor	r1, r1
    1a68:	53 2e       	mov	r5, r19
    1a6a:	13 c0       	rjmp	.+38     	; 0x1a92 <vfprintf+0xf2>
    1a6c:	8a e0       	ldi	r24, 0x0A	; 10
    1a6e:	38 9e       	mul	r3, r24
    1a70:	30 0d       	add	r19, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	33 2e       	mov	r3, r19
    1a76:	20 62       	ori	r18, 0x20	; 32
    1a78:	0c c0       	rjmp	.+24     	; 0x1a92 <vfprintf+0xf2>
    1a7a:	8e 32       	cpi	r24, 0x2E	; 46
    1a7c:	21 f4       	brne	.+8      	; 0x1a86 <vfprintf+0xe6>
    1a7e:	26 fd       	sbrc	r18, 6
    1a80:	6b c1       	rjmp	.+726    	; 0x1d58 <vfprintf+0x3b8>
    1a82:	20 64       	ori	r18, 0x40	; 64
    1a84:	06 c0       	rjmp	.+12     	; 0x1a92 <vfprintf+0xf2>
    1a86:	8c 36       	cpi	r24, 0x6C	; 108
    1a88:	11 f4       	brne	.+4      	; 0x1a8e <vfprintf+0xee>
    1a8a:	20 68       	ori	r18, 0x80	; 128
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <vfprintf+0xf2>
    1a8e:	88 36       	cpi	r24, 0x68	; 104
    1a90:	41 f4       	brne	.+16     	; 0x1aa2 <vfprintf+0x102>
    1a92:	f6 01       	movw	r30, r12
    1a94:	93 fd       	sbrc	r25, 3
    1a96:	85 91       	lpm	r24, Z+
    1a98:	93 ff       	sbrs	r25, 3
    1a9a:	81 91       	ld	r24, Z+
    1a9c:	6f 01       	movw	r12, r30
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	c1 cf       	rjmp	.-126    	; 0x1a24 <vfprintf+0x84>
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	9f 7d       	andi	r25, 0xDF	; 223
    1aa6:	95 54       	subi	r25, 0x45	; 69
    1aa8:	93 30       	cpi	r25, 0x03	; 3
    1aaa:	28 f4       	brcc	.+10     	; 0x1ab6 <vfprintf+0x116>
    1aac:	0c 5f       	subi	r16, 0xFC	; 252
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	ff e3       	ldi	r31, 0x3F	; 63
    1ab2:	f9 83       	std	Y+1, r31	; 0x01
    1ab4:	0d c0       	rjmp	.+26     	; 0x1ad0 <vfprintf+0x130>
    1ab6:	83 36       	cpi	r24, 0x63	; 99
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <vfprintf+0x126>
    1aba:	83 37       	cpi	r24, 0x73	; 115
    1abc:	71 f0       	breq	.+28     	; 0x1ada <vfprintf+0x13a>
    1abe:	83 35       	cpi	r24, 0x53	; 83
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <vfprintf+0x124>
    1ac2:	5b c0       	rjmp	.+182    	; 0x1b7a <vfprintf+0x1da>
    1ac4:	22 c0       	rjmp	.+68     	; 0x1b0a <vfprintf+0x16a>
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	0e 5f       	subi	r16, 0xFE	; 254
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	44 24       	eor	r4, r4
    1ad2:	43 94       	inc	r4
    1ad4:	51 2c       	mov	r5, r1
    1ad6:	54 01       	movw	r10, r8
    1ad8:	15 c0       	rjmp	.+42     	; 0x1b04 <vfprintf+0x164>
    1ada:	38 01       	movw	r6, r16
    1adc:	f2 e0       	ldi	r31, 0x02	; 2
    1ade:	6f 0e       	add	r6, r31
    1ae0:	71 1c       	adc	r7, r1
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	a0 80       	ld	r10, Z
    1ae6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ae8:	26 ff       	sbrs	r18, 6
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <vfprintf+0x152>
    1aec:	65 2d       	mov	r22, r5
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0x156>
    1af2:	6f ef       	ldi	r22, 0xFF	; 255
    1af4:	7f ef       	ldi	r23, 0xFF	; 255
    1af6:	c5 01       	movw	r24, r10
    1af8:	2c 87       	std	Y+12, r18	; 0x0c
    1afa:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <strnlen>
    1afe:	2c 01       	movw	r4, r24
    1b00:	83 01       	movw	r16, r6
    1b02:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b04:	2f 77       	andi	r18, 0x7F	; 127
    1b06:	22 2e       	mov	r2, r18
    1b08:	17 c0       	rjmp	.+46     	; 0x1b38 <vfprintf+0x198>
    1b0a:	38 01       	movw	r6, r16
    1b0c:	f2 e0       	ldi	r31, 0x02	; 2
    1b0e:	6f 0e       	add	r6, r31
    1b10:	71 1c       	adc	r7, r1
    1b12:	f8 01       	movw	r30, r16
    1b14:	a0 80       	ld	r10, Z
    1b16:	b1 80       	ldd	r11, Z+1	; 0x01
    1b18:	26 ff       	sbrs	r18, 6
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <vfprintf+0x182>
    1b1c:	65 2d       	mov	r22, r5
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <vfprintf+0x186>
    1b22:	6f ef       	ldi	r22, 0xFF	; 255
    1b24:	7f ef       	ldi	r23, 0xFF	; 255
    1b26:	c5 01       	movw	r24, r10
    1b28:	2c 87       	std	Y+12, r18	; 0x0c
    1b2a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <strnlen_P>
    1b2e:	2c 01       	movw	r4, r24
    1b30:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b32:	20 68       	ori	r18, 0x80	; 128
    1b34:	22 2e       	mov	r2, r18
    1b36:	83 01       	movw	r16, r6
    1b38:	23 fc       	sbrc	r2, 3
    1b3a:	1b c0       	rjmp	.+54     	; 0x1b72 <vfprintf+0x1d2>
    1b3c:	83 2d       	mov	r24, r3
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	48 16       	cp	r4, r24
    1b42:	59 06       	cpc	r5, r25
    1b44:	b0 f4       	brcc	.+44     	; 0x1b72 <vfprintf+0x1d2>
    1b46:	b7 01       	movw	r22, r14
    1b48:	80 e2       	ldi	r24, 0x20	; 32
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1b50:	3a 94       	dec	r3
    1b52:	f4 cf       	rjmp	.-24     	; 0x1b3c <vfprintf+0x19c>
    1b54:	f5 01       	movw	r30, r10
    1b56:	27 fc       	sbrc	r2, 7
    1b58:	85 91       	lpm	r24, Z+
    1b5a:	27 fe       	sbrs	r2, 7
    1b5c:	81 91       	ld	r24, Z+
    1b5e:	5f 01       	movw	r10, r30
    1b60:	b7 01       	movw	r22, r14
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1b68:	31 10       	cpse	r3, r1
    1b6a:	3a 94       	dec	r3
    1b6c:	f1 e0       	ldi	r31, 0x01	; 1
    1b6e:	4f 1a       	sub	r4, r31
    1b70:	51 08       	sbc	r5, r1
    1b72:	41 14       	cp	r4, r1
    1b74:	51 04       	cpc	r5, r1
    1b76:	71 f7       	brne	.-36     	; 0x1b54 <vfprintf+0x1b4>
    1b78:	e5 c0       	rjmp	.+458    	; 0x1d44 <vfprintf+0x3a4>
    1b7a:	84 36       	cpi	r24, 0x64	; 100
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <vfprintf+0x1e2>
    1b7e:	89 36       	cpi	r24, 0x69	; 105
    1b80:	39 f5       	brne	.+78     	; 0x1bd0 <vfprintf+0x230>
    1b82:	f8 01       	movw	r30, r16
    1b84:	27 ff       	sbrs	r18, 7
    1b86:	07 c0       	rjmp	.+14     	; 0x1b96 <vfprintf+0x1f6>
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	0c 5f       	subi	r16, 0xFC	; 252
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	08 c0       	rjmp	.+16     	; 0x1ba6 <vfprintf+0x206>
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	07 2e       	mov	r0, r23
    1b9c:	00 0c       	add	r0, r0
    1b9e:	88 0b       	sbc	r24, r24
    1ba0:	99 0b       	sbc	r25, r25
    1ba2:	0e 5f       	subi	r16, 0xFE	; 254
    1ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba6:	2f 76       	andi	r18, 0x6F	; 111
    1ba8:	72 2e       	mov	r7, r18
    1baa:	97 ff       	sbrs	r25, 7
    1bac:	09 c0       	rjmp	.+18     	; 0x1bc0 <vfprintf+0x220>
    1bae:	90 95       	com	r25
    1bb0:	80 95       	com	r24
    1bb2:	70 95       	com	r23
    1bb4:	61 95       	neg	r22
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	20 68       	ori	r18, 0x80	; 128
    1bbe:	72 2e       	mov	r7, r18
    1bc0:	2a e0       	ldi	r18, 0x0A	; 10
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	a4 01       	movw	r20, r8
    1bc6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__ultoa_invert>
    1bca:	a8 2e       	mov	r10, r24
    1bcc:	a8 18       	sub	r10, r8
    1bce:	44 c0       	rjmp	.+136    	; 0x1c58 <vfprintf+0x2b8>
    1bd0:	85 37       	cpi	r24, 0x75	; 117
    1bd2:	29 f4       	brne	.+10     	; 0x1bde <vfprintf+0x23e>
    1bd4:	2f 7e       	andi	r18, 0xEF	; 239
    1bd6:	b2 2e       	mov	r11, r18
    1bd8:	2a e0       	ldi	r18, 0x0A	; 10
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	25 c0       	rjmp	.+74     	; 0x1c28 <vfprintf+0x288>
    1bde:	f2 2f       	mov	r31, r18
    1be0:	f9 7f       	andi	r31, 0xF9	; 249
    1be2:	bf 2e       	mov	r11, r31
    1be4:	8f 36       	cpi	r24, 0x6F	; 111
    1be6:	c1 f0       	breq	.+48     	; 0x1c18 <vfprintf+0x278>
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <vfprintf+0x250>
    1bea:	88 35       	cpi	r24, 0x58	; 88
    1bec:	79 f0       	breq	.+30     	; 0x1c0c <vfprintf+0x26c>
    1bee:	b4 c0       	rjmp	.+360    	; 0x1d58 <vfprintf+0x3b8>
    1bf0:	80 37       	cpi	r24, 0x70	; 112
    1bf2:	19 f0       	breq	.+6      	; 0x1bfa <vfprintf+0x25a>
    1bf4:	88 37       	cpi	r24, 0x78	; 120
    1bf6:	21 f0       	breq	.+8      	; 0x1c00 <vfprintf+0x260>
    1bf8:	af c0       	rjmp	.+350    	; 0x1d58 <vfprintf+0x3b8>
    1bfa:	2f 2f       	mov	r18, r31
    1bfc:	20 61       	ori	r18, 0x10	; 16
    1bfe:	b2 2e       	mov	r11, r18
    1c00:	b4 fe       	sbrs	r11, 4
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <vfprintf+0x27e>
    1c04:	8b 2d       	mov	r24, r11
    1c06:	84 60       	ori	r24, 0x04	; 4
    1c08:	b8 2e       	mov	r11, r24
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <vfprintf+0x27e>
    1c0c:	24 ff       	sbrs	r18, 4
    1c0e:	0a c0       	rjmp	.+20     	; 0x1c24 <vfprintf+0x284>
    1c10:	9f 2f       	mov	r25, r31
    1c12:	96 60       	ori	r25, 0x06	; 6
    1c14:	b9 2e       	mov	r11, r25
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x284>
    1c18:	28 e0       	ldi	r18, 0x08	; 8
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <vfprintf+0x288>
    1c1e:	20 e1       	ldi	r18, 0x10	; 16
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x288>
    1c24:	20 e1       	ldi	r18, 0x10	; 16
    1c26:	32 e0       	ldi	r19, 0x02	; 2
    1c28:	f8 01       	movw	r30, r16
    1c2a:	b7 fe       	sbrs	r11, 7
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <vfprintf+0x29c>
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0c 5f       	subi	r16, 0xFC	; 252
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	06 c0       	rjmp	.+12     	; 0x1c48 <vfprintf+0x2a8>
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 5f       	subi	r16, 0xFE	; 254
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	a4 01       	movw	r20, r8
    1c4a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__ultoa_invert>
    1c4e:	a8 2e       	mov	r10, r24
    1c50:	a8 18       	sub	r10, r8
    1c52:	fb 2d       	mov	r31, r11
    1c54:	ff 77       	andi	r31, 0x7F	; 127
    1c56:	7f 2e       	mov	r7, r31
    1c58:	76 fe       	sbrs	r7, 6
    1c5a:	0b c0       	rjmp	.+22     	; 0x1c72 <vfprintf+0x2d2>
    1c5c:	37 2d       	mov	r19, r7
    1c5e:	3e 7f       	andi	r19, 0xFE	; 254
    1c60:	a5 14       	cp	r10, r5
    1c62:	50 f4       	brcc	.+20     	; 0x1c78 <vfprintf+0x2d8>
    1c64:	74 fe       	sbrs	r7, 4
    1c66:	0a c0       	rjmp	.+20     	; 0x1c7c <vfprintf+0x2dc>
    1c68:	72 fc       	sbrc	r7, 2
    1c6a:	08 c0       	rjmp	.+16     	; 0x1c7c <vfprintf+0x2dc>
    1c6c:	37 2d       	mov	r19, r7
    1c6e:	3e 7e       	andi	r19, 0xEE	; 238
    1c70:	05 c0       	rjmp	.+10     	; 0x1c7c <vfprintf+0x2dc>
    1c72:	ba 2c       	mov	r11, r10
    1c74:	37 2d       	mov	r19, r7
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <vfprintf+0x2de>
    1c78:	ba 2c       	mov	r11, r10
    1c7a:	01 c0       	rjmp	.+2      	; 0x1c7e <vfprintf+0x2de>
    1c7c:	b5 2c       	mov	r11, r5
    1c7e:	34 ff       	sbrs	r19, 4
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <vfprintf+0x2fc>
    1c82:	fe 01       	movw	r30, r28
    1c84:	ea 0d       	add	r30, r10
    1c86:	f1 1d       	adc	r31, r1
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 33       	cpi	r24, 0x30	; 48
    1c8c:	11 f4       	brne	.+4      	; 0x1c92 <vfprintf+0x2f2>
    1c8e:	39 7e       	andi	r19, 0xE9	; 233
    1c90:	09 c0       	rjmp	.+18     	; 0x1ca4 <vfprintf+0x304>
    1c92:	32 ff       	sbrs	r19, 2
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <vfprintf+0x302>
    1c96:	b3 94       	inc	r11
    1c98:	b3 94       	inc	r11
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <vfprintf+0x304>
    1c9c:	83 2f       	mov	r24, r19
    1c9e:	86 78       	andi	r24, 0x86	; 134
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <vfprintf+0x304>
    1ca2:	b3 94       	inc	r11
    1ca4:	33 fd       	sbrc	r19, 3
    1ca6:	13 c0       	rjmp	.+38     	; 0x1cce <vfprintf+0x32e>
    1ca8:	30 ff       	sbrs	r19, 0
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <vfprintf+0x318>
    1cac:	5a 2c       	mov	r5, r10
    1cae:	b3 14       	cp	r11, r3
    1cb0:	18 f4       	brcc	.+6      	; 0x1cb8 <vfprintf+0x318>
    1cb2:	53 0c       	add	r5, r3
    1cb4:	5b 18       	sub	r5, r11
    1cb6:	b3 2c       	mov	r11, r3
    1cb8:	b3 14       	cp	r11, r3
    1cba:	68 f4       	brcc	.+26     	; 0x1cd6 <vfprintf+0x336>
    1cbc:	b7 01       	movw	r22, r14
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	3c 87       	std	Y+12, r19	; 0x0c
    1cc4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1cc8:	b3 94       	inc	r11
    1cca:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ccc:	f5 cf       	rjmp	.-22     	; 0x1cb8 <vfprintf+0x318>
    1cce:	b3 14       	cp	r11, r3
    1cd0:	10 f4       	brcc	.+4      	; 0x1cd6 <vfprintf+0x336>
    1cd2:	3b 18       	sub	r3, r11
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <vfprintf+0x338>
    1cd6:	31 2c       	mov	r3, r1
    1cd8:	34 ff       	sbrs	r19, 4
    1cda:	12 c0       	rjmp	.+36     	; 0x1d00 <vfprintf+0x360>
    1cdc:	b7 01       	movw	r22, r14
    1cde:	80 e3       	ldi	r24, 0x30	; 48
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	3c 87       	std	Y+12, r19	; 0x0c
    1ce4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1ce8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cea:	32 ff       	sbrs	r19, 2
    1cec:	17 c0       	rjmp	.+46     	; 0x1d1c <vfprintf+0x37c>
    1cee:	31 fd       	sbrc	r19, 1
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <vfprintf+0x358>
    1cf2:	88 e7       	ldi	r24, 0x78	; 120
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0x35c>
    1cf8:	88 e5       	ldi	r24, 0x58	; 88
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	b7 01       	movw	r22, r14
    1cfe:	0c c0       	rjmp	.+24     	; 0x1d18 <vfprintf+0x378>
    1d00:	83 2f       	mov	r24, r19
    1d02:	86 78       	andi	r24, 0x86	; 134
    1d04:	59 f0       	breq	.+22     	; 0x1d1c <vfprintf+0x37c>
    1d06:	31 ff       	sbrs	r19, 1
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <vfprintf+0x36e>
    1d0a:	8b e2       	ldi	r24, 0x2B	; 43
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <vfprintf+0x370>
    1d0e:	80 e2       	ldi	r24, 0x20	; 32
    1d10:	37 fd       	sbrc	r19, 7
    1d12:	8d e2       	ldi	r24, 0x2D	; 45
    1d14:	b7 01       	movw	r22, r14
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1d1c:	a5 14       	cp	r10, r5
    1d1e:	38 f4       	brcc	.+14     	; 0x1d2e <vfprintf+0x38e>
    1d20:	b7 01       	movw	r22, r14
    1d22:	80 e3       	ldi	r24, 0x30	; 48
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1d2a:	5a 94       	dec	r5
    1d2c:	f7 cf       	rjmp	.-18     	; 0x1d1c <vfprintf+0x37c>
    1d2e:	aa 94       	dec	r10
    1d30:	f4 01       	movw	r30, r8
    1d32:	ea 0d       	add	r30, r10
    1d34:	f1 1d       	adc	r31, r1
    1d36:	80 81       	ld	r24, Z
    1d38:	b7 01       	movw	r22, r14
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1d40:	a1 10       	cpse	r10, r1
    1d42:	f5 cf       	rjmp	.-22     	; 0x1d2e <vfprintf+0x38e>
    1d44:	33 20       	and	r3, r3
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <vfprintf+0x3aa>
    1d48:	51 ce       	rjmp	.-862    	; 0x19ec <vfprintf+0x4c>
    1d4a:	b7 01       	movw	r22, r14
    1d4c:	80 e2       	ldi	r24, 0x20	; 32
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <fputc>
    1d54:	3a 94       	dec	r3
    1d56:	f6 cf       	rjmp	.-20     	; 0x1d44 <vfprintf+0x3a4>
    1d58:	f7 01       	movw	r30, r14
    1d5a:	86 81       	ldd	r24, Z+6	; 0x06
    1d5c:	97 81       	ldd	r25, Z+7	; 0x07
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <vfprintf+0x3c4>
    1d60:	8f ef       	ldi	r24, 0xFF	; 255
    1d62:	9f ef       	ldi	r25, 0xFF	; 255
    1d64:	2c 96       	adiw	r28, 0x0c	; 12
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ff 90       	pop	r15
    1d7a:	ef 90       	pop	r14
    1d7c:	df 90       	pop	r13
    1d7e:	cf 90       	pop	r12
    1d80:	bf 90       	pop	r11
    1d82:	af 90       	pop	r10
    1d84:	9f 90       	pop	r9
    1d86:	8f 90       	pop	r8
    1d88:	7f 90       	pop	r7
    1d8a:	6f 90       	pop	r6
    1d8c:	5f 90       	pop	r5
    1d8e:	4f 90       	pop	r4
    1d90:	3f 90       	pop	r3
    1d92:	2f 90       	pop	r2
    1d94:	08 95       	ret

00001d96 <strnlen_P>:
    1d96:	fc 01       	movw	r30, r24
    1d98:	05 90       	lpm	r0, Z+
    1d9a:	61 50       	subi	r22, 0x01	; 1
    1d9c:	70 40       	sbci	r23, 0x00	; 0
    1d9e:	01 10       	cpse	r0, r1
    1da0:	d8 f7       	brcc	.-10     	; 0x1d98 <strnlen_P+0x2>
    1da2:	80 95       	com	r24
    1da4:	90 95       	com	r25
    1da6:	8e 0f       	add	r24, r30
    1da8:	9f 1f       	adc	r25, r31
    1daa:	08 95       	ret

00001dac <strnlen>:
    1dac:	fc 01       	movw	r30, r24
    1dae:	61 50       	subi	r22, 0x01	; 1
    1db0:	70 40       	sbci	r23, 0x00	; 0
    1db2:	01 90       	ld	r0, Z+
    1db4:	01 10       	cpse	r0, r1
    1db6:	d8 f7       	brcc	.-10     	; 0x1dae <strnlen+0x2>
    1db8:	80 95       	com	r24
    1dba:	90 95       	com	r25
    1dbc:	8e 0f       	add	r24, r30
    1dbe:	9f 1f       	adc	r25, r31
    1dc0:	08 95       	ret

00001dc2 <fputc>:
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	fb 01       	movw	r30, r22
    1dcc:	23 81       	ldd	r18, Z+3	; 0x03
    1dce:	21 fd       	sbrc	r18, 1
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <fputc+0x16>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	28 c0       	rjmp	.+80     	; 0x1e28 <fputc+0x66>
    1dd8:	22 ff       	sbrs	r18, 2
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <fputc+0x46>
    1ddc:	46 81       	ldd	r20, Z+6	; 0x06
    1dde:	57 81       	ldd	r21, Z+7	; 0x07
    1de0:	24 81       	ldd	r18, Z+4	; 0x04
    1de2:	35 81       	ldd	r19, Z+5	; 0x05
    1de4:	42 17       	cp	r20, r18
    1de6:	53 07       	cpc	r21, r19
    1de8:	44 f4       	brge	.+16     	; 0x1dfa <fputc+0x38>
    1dea:	a0 81       	ld	r26, Z
    1dec:	b1 81       	ldd	r27, Z+1	; 0x01
    1dee:	9d 01       	movw	r18, r26
    1df0:	2f 5f       	subi	r18, 0xFF	; 255
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	31 83       	std	Z+1, r19	; 0x01
    1df6:	20 83       	st	Z, r18
    1df8:	8c 93       	st	X, r24
    1dfa:	26 81       	ldd	r18, Z+6	; 0x06
    1dfc:	37 81       	ldd	r19, Z+7	; 0x07
    1dfe:	2f 5f       	subi	r18, 0xFF	; 255
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	37 83       	std	Z+7, r19	; 0x07
    1e04:	26 83       	std	Z+6, r18	; 0x06
    1e06:	10 c0       	rjmp	.+32     	; 0x1e28 <fputc+0x66>
    1e08:	eb 01       	movw	r28, r22
    1e0a:	09 2f       	mov	r16, r25
    1e0c:	18 2f       	mov	r17, r24
    1e0e:	00 84       	ldd	r0, Z+8	; 0x08
    1e10:	f1 85       	ldd	r31, Z+9	; 0x09
    1e12:	e0 2d       	mov	r30, r0
    1e14:	09 95       	icall
    1e16:	89 2b       	or	r24, r25
    1e18:	e1 f6       	brne	.-72     	; 0x1dd2 <fputc+0x10>
    1e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	9f 83       	std	Y+7, r25	; 0x07
    1e22:	8e 83       	std	Y+6, r24	; 0x06
    1e24:	81 2f       	mov	r24, r17
    1e26:	90 2f       	mov	r25, r16
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	08 95       	ret

00001e32 <__ultoa_invert>:
    1e32:	fa 01       	movw	r30, r20
    1e34:	aa 27       	eor	r26, r26
    1e36:	28 30       	cpi	r18, 0x08	; 8
    1e38:	51 f1       	breq	.+84     	; 0x1e8e <__ultoa_invert+0x5c>
    1e3a:	20 31       	cpi	r18, 0x10	; 16
    1e3c:	81 f1       	breq	.+96     	; 0x1e9e <__ultoa_invert+0x6c>
    1e3e:	e8 94       	clt
    1e40:	6f 93       	push	r22
    1e42:	6e 7f       	andi	r22, 0xFE	; 254
    1e44:	6e 5f       	subi	r22, 0xFE	; 254
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	af 4f       	sbci	r26, 0xFF	; 255
    1e4e:	b1 e0       	ldi	r27, 0x01	; 1
    1e50:	3e d0       	rcall	.+124    	; 0x1ece <__ultoa_invert+0x9c>
    1e52:	b4 e0       	ldi	r27, 0x04	; 4
    1e54:	3c d0       	rcall	.+120    	; 0x1ece <__ultoa_invert+0x9c>
    1e56:	67 0f       	add	r22, r23
    1e58:	78 1f       	adc	r23, r24
    1e5a:	89 1f       	adc	r24, r25
    1e5c:	9a 1f       	adc	r25, r26
    1e5e:	a1 1d       	adc	r26, r1
    1e60:	68 0f       	add	r22, r24
    1e62:	79 1f       	adc	r23, r25
    1e64:	8a 1f       	adc	r24, r26
    1e66:	91 1d       	adc	r25, r1
    1e68:	a1 1d       	adc	r26, r1
    1e6a:	6a 0f       	add	r22, r26
    1e6c:	71 1d       	adc	r23, r1
    1e6e:	81 1d       	adc	r24, r1
    1e70:	91 1d       	adc	r25, r1
    1e72:	a1 1d       	adc	r26, r1
    1e74:	20 d0       	rcall	.+64     	; 0x1eb6 <__ultoa_invert+0x84>
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <__ultoa_invert+0x48>
    1e78:	68 94       	set
    1e7a:	3f 91       	pop	r19
    1e7c:	2a e0       	ldi	r18, 0x0A	; 10
    1e7e:	26 9f       	mul	r18, r22
    1e80:	11 24       	eor	r1, r1
    1e82:	30 19       	sub	r19, r0
    1e84:	30 5d       	subi	r19, 0xD0	; 208
    1e86:	31 93       	st	Z+, r19
    1e88:	de f6       	brtc	.-74     	; 0x1e40 <__ultoa_invert+0xe>
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	08 95       	ret
    1e8e:	46 2f       	mov	r20, r22
    1e90:	47 70       	andi	r20, 0x07	; 7
    1e92:	40 5d       	subi	r20, 0xD0	; 208
    1e94:	41 93       	st	Z+, r20
    1e96:	b3 e0       	ldi	r27, 0x03	; 3
    1e98:	0f d0       	rcall	.+30     	; 0x1eb8 <__ultoa_invert+0x86>
    1e9a:	c9 f7       	brne	.-14     	; 0x1e8e <__ultoa_invert+0x5c>
    1e9c:	f6 cf       	rjmp	.-20     	; 0x1e8a <__ultoa_invert+0x58>
    1e9e:	46 2f       	mov	r20, r22
    1ea0:	4f 70       	andi	r20, 0x0F	; 15
    1ea2:	40 5d       	subi	r20, 0xD0	; 208
    1ea4:	4a 33       	cpi	r20, 0x3A	; 58
    1ea6:	18 f0       	brcs	.+6      	; 0x1eae <__ultoa_invert+0x7c>
    1ea8:	49 5d       	subi	r20, 0xD9	; 217
    1eaa:	31 fd       	sbrc	r19, 1
    1eac:	40 52       	subi	r20, 0x20	; 32
    1eae:	41 93       	st	Z+, r20
    1eb0:	02 d0       	rcall	.+4      	; 0x1eb6 <__ultoa_invert+0x84>
    1eb2:	a9 f7       	brne	.-22     	; 0x1e9e <__ultoa_invert+0x6c>
    1eb4:	ea cf       	rjmp	.-44     	; 0x1e8a <__ultoa_invert+0x58>
    1eb6:	b4 e0       	ldi	r27, 0x04	; 4
    1eb8:	a6 95       	lsr	r26
    1eba:	97 95       	ror	r25
    1ebc:	87 95       	ror	r24
    1ebe:	77 95       	ror	r23
    1ec0:	67 95       	ror	r22
    1ec2:	ba 95       	dec	r27
    1ec4:	c9 f7       	brne	.-14     	; 0x1eb8 <__ultoa_invert+0x86>
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	61 05       	cpc	r22, r1
    1eca:	71 05       	cpc	r23, r1
    1ecc:	08 95       	ret
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	0a 2e       	mov	r0, r26
    1ed4:	06 94       	lsr	r0
    1ed6:	57 95       	ror	r21
    1ed8:	47 95       	ror	r20
    1eda:	37 95       	ror	r19
    1edc:	27 95       	ror	r18
    1ede:	ba 95       	dec	r27
    1ee0:	c9 f7       	brne	.-14     	; 0x1ed4 <__ultoa_invert+0xa2>
    1ee2:	62 0f       	add	r22, r18
    1ee4:	73 1f       	adc	r23, r19
    1ee6:	84 1f       	adc	r24, r20
    1ee8:	95 1f       	adc	r25, r21
    1eea:	a0 1d       	adc	r26, r0
    1eec:	08 95       	ret

00001eee <eeprom_read_byte>:
    1eee:	e1 99       	sbic	0x1c, 1	; 28
    1ef0:	fe cf       	rjmp	.-4      	; 0x1eee <eeprom_read_byte>
    1ef2:	9f bb       	out	0x1f, r25	; 31
    1ef4:	8e bb       	out	0x1e, r24	; 30
    1ef6:	e0 9a       	sbi	0x1c, 0	; 28
    1ef8:	99 27       	eor	r25, r25
    1efa:	8d b3       	in	r24, 0x1d	; 29
    1efc:	08 95       	ret

00001efe <eeprom_read_word>:
    1efe:	a8 e1       	ldi	r26, 0x18	; 24
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	42 e0       	ldi	r20, 0x02	; 2
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <eeprom_read_blraw>

00001f0a <eeprom_write_byte>:
    1f0a:	26 2f       	mov	r18, r22

00001f0c <eeprom_write_r18>:
    1f0c:	e1 99       	sbic	0x1c, 1	; 28
    1f0e:	fe cf       	rjmp	.-4      	; 0x1f0c <eeprom_write_r18>
    1f10:	9f bb       	out	0x1f, r25	; 31
    1f12:	8e bb       	out	0x1e, r24	; 30
    1f14:	2d bb       	out	0x1d, r18	; 29
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	e2 9a       	sbi	0x1c, 2	; 28
    1f1c:	e1 9a       	sbi	0x1c, 1	; 28
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	08 95       	ret

00001f24 <eeprom_write_word>:
    1f24:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <eeprom_write_byte>
    1f28:	27 2f       	mov	r18, r23
    1f2a:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <eeprom_write_r18>

00001f2e <eeprom_read_block>:
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22

00001f32 <eeprom_read_blraw>:
    1f32:	fc 01       	movw	r30, r24
    1f34:	e1 99       	sbic	0x1c, 1	; 28
    1f36:	fe cf       	rjmp	.-4      	; 0x1f34 <eeprom_read_blraw+0x2>
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <eeprom_read_blraw+0x14>
    1f3a:	ff bb       	out	0x1f, r31	; 31
    1f3c:	ee bb       	out	0x1e, r30	; 30
    1f3e:	e0 9a       	sbi	0x1c, 0	; 28
    1f40:	31 96       	adiw	r30, 0x01	; 1
    1f42:	0d b2       	in	r0, 0x1d	; 29
    1f44:	0d 92       	st	X+, r0
    1f46:	41 50       	subi	r20, 0x01	; 1
    1f48:	50 40       	sbci	r21, 0x00	; 0
    1f4a:	b8 f7       	brcc	.-18     	; 0x1f3a <eeprom_read_blraw+0x8>
    1f4c:	08 95       	ret

00001f4e <_exit>:
    1f4e:	f8 94       	cli

00001f50 <__stop_program>:
    1f50:	ff cf       	rjmp	.-2      	; 0x1f50 <__stop_program>
